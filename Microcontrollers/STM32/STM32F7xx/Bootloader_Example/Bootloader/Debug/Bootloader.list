
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d08  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005254  08005254  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800525c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000070  080052cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  080052cc  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3bd  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a0  00000000  00000000  0002d45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028870  00000000  00000000  00030b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be69  00000000  00000000  00059400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f366f  00000000  00000000  00065269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001588d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d78  00000000  00000000  0015892c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004ef0 	.word	0x08004ef0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004ef0 	.word	0x08004ef0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005e2:	481f      	ldr	r0, [pc, #124]	; (8000660 <etx_ota_download_and_flash+0x88>)
 80005e4:	f003 fd3e 	bl	8004064 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <etx_ota_download_and_flash+0x8c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <etx_ota_download_and_flash+0x90>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <etx_ota_download_and_flash+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <etx_ota_download_and_flash+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000600:	f240 4209 	movw	r2, #1033	; 0x409
 8000604:	2100      	movs	r1, #0
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 8000608:	f003 fc9e 	bl	8003f48 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 800060c:	f240 4109 	movw	r1, #1033	; 0x409
 8000610:	4818      	ldr	r0, [pc, #96]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 8000612:	f000 f929 	bl	8000868 <etx_receive_chunk>
 8000616:	4603      	mov	r3, r0
 8000618:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 800061a:	88bb      	ldrh	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d007      	beq.n	8000630 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <etx_ota_download_and_flash+0x9c>)
 8000626:	f000 f829 	bl	800067c <etx_process_data>
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	e001      	b.n	8000634 <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 8000630:	2301      	movs	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <etx_ota_download_and_flash+0xa0>)
 800063c:	f003 fd12 	bl	8004064 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 8000640:	2001      	movs	r0, #1
 8000642:	f000 f9f5 	bl	8000a30 <etx_ota_send_resp>
      break;
 8000646:	e006      	b.n	8000656 <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f9f1 	bl	8000a30 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <etx_ota_download_and_flash+0x98>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1d4      	bne.n	8000600 <etx_ota_download_and_flash+0x28>

  return ret;
 8000656:	79fb      	ldrb	r3, [r7, #7]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	08004f08 	.word	0x08004f08
 8000664:	20000498 	.word	0x20000498
 8000668:	200004a0 	.word	0x200004a0
 800066c:	2000049c 	.word	0x2000049c
 8000670:	20000495 	.word	0x20000495
 8000674:	2000008c 	.word	0x2000008c
 8000678:	08004f28 	.word	0x08004f28

0800067c <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000688:	2301      	movs	r3, #1
 800068a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80bc 	beq.w	800080e <etx_process_data+0x192>
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 80b8 	beq.w	800080e <etx_process_data+0x192>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006a2:	6a3b      	ldr	r3, [r7, #32]
 80006a4:	785b      	ldrb	r3, [r3, #1]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d104      	bne.n	80006b4 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 80006aa:	6a3b      	ldr	r3, [r7, #32]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	f000 80af 	beq.w	8000812 <etx_process_data+0x196>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 80006b4:	4b5e      	ldr	r3, [pc, #376]	; (8000830 <etx_process_data+0x1b4>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	f200 80a4 	bhi.w	8000806 <etx_process_data+0x18a>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <etx_process_data+0x48>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006d9 	.word	0x080006d9
 80006c8:	080006e7 	.word	0x080006e7
 80006cc:	08000713 	.word	0x08000713
 80006d0:	08000749 	.word	0x08000749
 80006d4:	080007b1 	.word	0x080007b1
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006d8:	4856      	ldr	r0, [pc, #344]	; (8000834 <etx_process_data+0x1b8>)
 80006da:	f003 fcc3 	bl	8004064 <puts>
        ret = ETX_OTA_EX_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80006e4:	e09e      	b.n	8000824 <etx_process_data+0x1a8>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60bb      	str	r3, [r7, #8]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	785b      	ldrb	r3, [r3, #1]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f040 8091 	bne.w	8000816 <etx_process_data+0x19a>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f040 808c 	bne.w	8000816 <etx_process_data+0x19a>
          {
            printf("Received OTA START Command\r\n");
 80006fe:	484e      	ldr	r0, [pc, #312]	; (8000838 <etx_process_data+0x1bc>)
 8000700:	f003 fcb0 	bl	8004064 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000704:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <etx_process_data+0x1b4>)
 8000706:	2202      	movs	r2, #2
 8000708:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 8000710:	e081      	b.n	8000816 <etx_process_data+0x19a>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	60fb      	str	r3, [r7, #12]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	785b      	ldrb	r3, [r3, #1]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d17d      	bne.n	800081a <etx_process_data+0x19e>
        {
          ota_fw_total_size = header->meta_data.package_size;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a46      	ldr	r2, [pc, #280]	; (800083c <etx_process_data+0x1c0>)
 8000724:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	4a45      	ldr	r2, [pc, #276]	; (8000840 <etx_process_data+0x1c4>)
 800072c:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 800072e:	4b43      	ldr	r3, [pc, #268]	; (800083c <etx_process_data+0x1c0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	4843      	ldr	r0, [pc, #268]	; (8000844 <etx_process_data+0x1c8>)
 8000736:	f003 fc0f 	bl	8003f58 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <etx_process_data+0x1b4>)
 800073c:	2203      	movs	r2, #3
 800073e:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 8000740:	2300      	movs	r3, #0
 8000742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      break;
 8000746:	e068      	b.n	800081a <etx_process_data+0x19e>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	617b      	str	r3, [r7, #20]
        uint16_t          data_len = data->data_len;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	789a      	ldrb	r2, [r3, #2]
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	4313      	orrs	r3, r2
 8000756:	827b      	strh	r3, [r7, #18]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d15e      	bne.n	800081e <etx_process_data+0x1a2>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf, data_len, ( ota_fw_received_size == 0) );
 8000760:	4b39      	ldr	r3, [pc, #228]	; (8000848 <etx_process_data+0x1cc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf0c      	ite	eq
 8000768:	2301      	moveq	r3, #1
 800076a:	2300      	movne	r3, #0
 800076c:	b2da      	uxtb	r2, r3
 800076e:	8a7b      	ldrh	r3, [r7, #18]
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 f982 	bl	8000a7c <write_data_to_flash_app>
 8000778:	4603      	mov	r3, r0
 800077a:	747b      	strb	r3, [r7, #17]

          if( ex == HAL_OK )
 800077c:	7c7b      	ldrb	r3, [r7, #17]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d14d      	bne.n	800081e <etx_process_data+0x1a2>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000782:	4b31      	ldr	r3, [pc, #196]	; (8000848 <etx_process_data+0x1cc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	0a99      	lsrs	r1, r3, #10
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <etx_process_data+0x1c0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	0a9b      	lsrs	r3, r3, #10
 800078e:	461a      	mov	r2, r3
 8000790:	482e      	ldr	r0, [pc, #184]	; (800084c <etx_process_data+0x1d0>)
 8000792:	f003 fbe1 	bl	8003f58 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <etx_process_data+0x1cc>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <etx_process_data+0x1c0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d302      	bcc.n	80007a8 <etx_process_data+0x12c>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <etx_process_data+0x1b4>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80007ae:	e036      	b.n	800081e <etx_process_data+0x1a2>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d132      	bne.n	8000822 <etx_process_data+0x1a6>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d12e      	bne.n	8000822 <etx_process_data+0x1a6>
          {
            printf("Received OTA END Command\r\n");
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <etx_process_data+0x1d4>)
 80007c6:	f003 fc4d 	bl	8004064 <puts>

            printf("Validating the received Binary...");
 80007ca:	4822      	ldr	r0, [pc, #136]	; (8000854 <etx_process_data+0x1d8>)
 80007cc:	f003 fbc4 	bl	8003f58 <iprintf>

            //Calculate and verify the CRC
            uint32_t cal_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)ETX_APP_FLASH_ADDR, ota_fw_total_size);
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <etx_process_data+0x1c0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4920      	ldr	r1, [pc, #128]	; (8000858 <etx_process_data+0x1dc>)
 80007d8:	4820      	ldr	r0, [pc, #128]	; (800085c <etx_process_data+0x1e0>)
 80007da:	f000 ff2f 	bl	800163c <HAL_CRC_Calculate>
 80007de:	61b8      	str	r0, [r7, #24]
            if( cal_crc != ota_fw_crc )
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <etx_process_data+0x1c4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69ba      	ldr	r2, [r7, #24]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d003      	beq.n	80007f2 <etx_process_data+0x176>
            {
              printf("ERROR -FW CRC Mismatch\r\n");
 80007ea:	481d      	ldr	r0, [pc, #116]	; (8000860 <etx_process_data+0x1e4>)
 80007ec:	f003 fc3a 	bl	8004064 <puts>
              break;
 80007f0:	e018      	b.n	8000824 <etx_process_data+0x1a8>
            }
            printf("Done!!!\r\n");
 80007f2:	481c      	ldr	r0, [pc, #112]	; (8000864 <etx_process_data+0x1e8>)
 80007f4:	f003 fc36 	bl	8004064 <puts>

            ota_state = ETX_OTA_STATE_IDLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <etx_process_data+0x1b4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 8000804:	e00d      	b.n	8000822 <etx_process_data+0x1a6>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 8000806:	2301      	movs	r3, #1
 8000808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800080c:	e00a      	b.n	8000824 <etx_process_data+0x1a8>
    };
 800080e:	bf00      	nop
 8000810:	e008      	b.n	8000824 <etx_process_data+0x1a8>
        break;
 8000812:	bf00      	nop
 8000814:	e006      	b.n	8000824 <etx_process_data+0x1a8>
      break;
 8000816:	bf00      	nop
 8000818:	e004      	b.n	8000824 <etx_process_data+0x1a8>
      break;
 800081a:	bf00      	nop
 800081c:	e002      	b.n	8000824 <etx_process_data+0x1a8>
      break;
 800081e:	bf00      	nop
 8000820:	e000      	b.n	8000824 <etx_process_data+0x1a8>
      break;
 8000822:	bf00      	nop
  }while( false );

  return ret;
 8000824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000828:	4618      	mov	r0, r3
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000495 	.word	0x20000495
 8000834:	08004f38 	.word	0x08004f38
 8000838:	08004f50 	.word	0x08004f50
 800083c:	20000498 	.word	0x20000498
 8000840:	2000049c 	.word	0x2000049c
 8000844:	08004f6c 	.word	0x08004f6c
 8000848:	200004a0 	.word	0x200004a0
 800084c:	08004f94 	.word	0x08004f94
 8000850:	08004fa0 	.word	0x08004fa0
 8000854:	08004fbc 	.word	0x08004fbc
 8000858:	08040000 	.word	0x08040000
 800085c:	20000534 	.word	0x20000534
 8000860:	08004fe0 	.word	0x08004fe0
 8000864:	08004ff8 	.word	0x08004ff8

08000868 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index        = 0u;
 8000874:	2300      	movs	r3, #0
 8000876:	83bb      	strh	r3, [r7, #28]
  uint16_t data_len;
  uint32_t cal_data_crc = 0u;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  uint32_t rec_data_crc = 0u;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 8000880:	8bbb      	ldrh	r3, [r7, #28]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	18d1      	adds	r1, r2, r3
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	2201      	movs	r2, #1
 800088c:	4864      	ldr	r0, [pc, #400]	; (8000a20 <etx_receive_chunk+0x1b8>)
 800088e:	f002 fe96 	bl	80035be <HAL_UART_Receive>
 8000892:	4603      	mov	r3, r0
 8000894:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000896:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 809e 	bne.w	80009dc <etx_receive_chunk+0x174>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 80008a0:	8bbb      	ldrh	r3, [r7, #28]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	83ba      	strh	r2, [r7, #28]
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2baa      	cmp	r3, #170	; 0xaa
 80008b0:	d002      	beq.n	80008b8 <etx_receive_chunk+0x50>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	83fb      	strh	r3, [r7, #30]
      break;
 80008b6:	e09c      	b.n	80009f2 <etx_receive_chunk+0x18a>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 80008b8:	8bbb      	ldrh	r3, [r7, #28]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	83ba      	strh	r2, [r7, #28]
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	1899      	adds	r1, r3, r2
 80008c4:	f04f 33ff 	mov.w	r3, #4294967295
 80008c8:	2201      	movs	r2, #1
 80008ca:	4855      	ldr	r0, [pc, #340]	; (8000a20 <etx_receive_chunk+0x1b8>)
 80008cc:	f002 fe77 	bl	80035be <HAL_UART_Receive>
 80008d0:	4603      	mov	r3, r0
 80008d2:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 80008d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f040 8081 	bne.w	80009e0 <etx_receive_chunk+0x178>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 80008de:	8bbb      	ldrh	r3, [r7, #28]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	18d1      	adds	r1, r2, r3
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	2202      	movs	r2, #2
 80008ea:	484d      	ldr	r0, [pc, #308]	; (8000a20 <etx_receive_chunk+0x1b8>)
 80008ec:	f002 fe67 	bl	80035be <HAL_UART_Receive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 80008f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d173      	bne.n	80009e4 <etx_receive_chunk+0x17c>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 80008fc:	8bbb      	ldrh	r3, [r7, #28]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	81fb      	strh	r3, [r7, #14]
    index += 2u;
 8000906:	8bbb      	ldrh	r3, [r7, #28]
 8000908:	3302      	adds	r3, #2
 800090a:	83bb      	strh	r3, [r7, #28]

    for( uint16_t i = 0u; i < data_len; i++ )
 800090c:	2300      	movs	r3, #0
 800090e:	837b      	strh	r3, [r7, #26]
 8000910:	e014      	b.n	800093c <etx_receive_chunk+0xd4>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000912:	8bbb      	ldrh	r3, [r7, #28]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	83ba      	strh	r2, [r7, #28]
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	1899      	adds	r1, r3, r2
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	2201      	movs	r2, #1
 8000924:	483e      	ldr	r0, [pc, #248]	; (8000a20 <etx_receive_chunk+0x1b8>)
 8000926:	f002 fe4a 	bl	80035be <HAL_UART_Receive>
 800092a:	4603      	mov	r3, r0
 800092c:	83fb      	strh	r3, [r7, #30]
      if( ret != HAL_OK )
 800092e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d107      	bne.n	8000946 <etx_receive_chunk+0xde>
    for( uint16_t i = 0u; i < data_len; i++ )
 8000936:	8b7b      	ldrh	r3, [r7, #26]
 8000938:	3301      	adds	r3, #1
 800093a:	837b      	strh	r3, [r7, #26]
 800093c:	8b7a      	ldrh	r2, [r7, #26]
 800093e:	89fb      	ldrh	r3, [r7, #14]
 8000940:	429a      	cmp	r2, r3
 8000942:	d3e6      	bcc.n	8000912 <etx_receive_chunk+0xaa>
 8000944:	e000      	b.n	8000948 <etx_receive_chunk+0xe0>
      {
        break;
 8000946:	bf00      	nop
      }
    }

    if( ret != HAL_OK )
 8000948:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d14b      	bne.n	80009e8 <etx_receive_chunk+0x180>
    {
      break;
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 8000950:	8bbb      	ldrh	r3, [r7, #28]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	18d1      	adds	r1, r2, r3
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	2204      	movs	r2, #4
 800095c:	4830      	ldr	r0, [pc, #192]	; (8000a20 <etx_receive_chunk+0x1b8>)
 800095e:	f002 fe2e 	bl	80035be <HAL_UART_Receive>
 8000962:	4603      	mov	r3, r0
 8000964:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000966:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d13e      	bne.n	80009ec <etx_receive_chunk+0x184>
    {
      break;
    }
    rec_data_crc = *(uint32_t *)&buf[index];
 800096e:	8bbb      	ldrh	r3, [r7, #28]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
    index += 4u;
 8000978:	8bbb      	ldrh	r3, [r7, #28]
 800097a:	3304      	adds	r3, #4
 800097c:	83bb      	strh	r3, [r7, #28]

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 800097e:	8bbb      	ldrh	r3, [r7, #28]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	18d1      	adds	r1, r2, r3
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	2201      	movs	r2, #1
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <etx_receive_chunk+0x1b8>)
 800098c:	f002 fe17 	bl	80035be <HAL_UART_Receive>
 8000990:	4603      	mov	r3, r0
 8000992:	83fb      	strh	r3, [r7, #30]
    if( ret != HAL_OK )
 8000994:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d129      	bne.n	80009f0 <etx_receive_chunk+0x188>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	83ba      	strh	r2, [r7, #28]
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2bbb      	cmp	r3, #187	; 0xbb
 80009ac:	d002      	beq.n	80009b4 <etx_receive_chunk+0x14c>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	83fb      	strh	r3, [r7, #30]
      break;
 80009b2:	e01e      	b.n	80009f2 <etx_receive_chunk+0x18a>
    }

    //Calculate the received data's CRC
    cal_data_crc = HAL_CRC_Calculate( &hcrc, (uint32_t*)&buf[4], data_len);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3304      	adds	r3, #4
 80009b8:	89fa      	ldrh	r2, [r7, #14]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4819      	ldr	r0, [pc, #100]	; (8000a24 <etx_receive_chunk+0x1bc>)
 80009be:	f000 fe3d 	bl	800163c <HAL_CRC_Calculate>
 80009c2:	6178      	str	r0, [r7, #20]

    //Verify the CRC
    if( cal_data_crc != rec_data_crc )
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d012      	beq.n	80009f2 <etx_receive_chunk+0x18a>
    {
      printf("Chunk's CRC mismatch [Cal CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	6979      	ldr	r1, [r7, #20]
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <etx_receive_chunk+0x1c0>)
 80009d2:	f003 fac1 	bl	8003f58 <iprintf>
                                                   cal_data_crc, rec_data_crc );
      ret = ETX_OTA_EX_ERR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	83fb      	strh	r3, [r7, #30]
      break;
 80009da:	e00a      	b.n	80009f2 <etx_receive_chunk+0x18a>
      break;
 80009dc:	bf00      	nop
 80009de:	e008      	b.n	80009f2 <etx_receive_chunk+0x18a>
      break;
 80009e0:	bf00      	nop
 80009e2:	e006      	b.n	80009f2 <etx_receive_chunk+0x18a>
      break;
 80009e4:	bf00      	nop
 80009e6:	e004      	b.n	80009f2 <etx_receive_chunk+0x18a>
      break;
 80009e8:	bf00      	nop
 80009ea:	e002      	b.n	80009f2 <etx_receive_chunk+0x18a>
      break;
 80009ec:	bf00      	nop
 80009ee:	e000      	b.n	80009f2 <etx_receive_chunk+0x18a>
      break;
 80009f0:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 80009f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <etx_receive_chunk+0x196>
  {
    //clear the index if error
    index = 0u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	83bb      	strh	r3, [r7, #28]
  }

  if( max_len < index )
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	8bbb      	ldrh	r3, [r7, #28]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d207      	bcs.n	8000a16 <etx_receive_chunk+0x1ae>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	8bba      	ldrh	r2, [r7, #28]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <etx_receive_chunk+0x1c4>)
 8000a0e:	f003 faa3 	bl	8003f58 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	83bb      	strh	r3, [r7, #28]
  }

  return index;
 8000a16:	8bbb      	ldrh	r3, [r7, #28]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000558 	.word	0x20000558
 8000a24:	20000534 	.word	0x20000534
 8000a28:	08005004 	.word	0x08005004
 8000a2c:	08005044 	.word	0x08005044

08000a30 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 8000a3a:	23aa      	movs	r3, #170	; 0xaa
 8000a3c:	733b      	strb	r3, [r7, #12]
 8000a3e:	2303      	movs	r3, #3
 8000a40:	737b      	strb	r3, [r7, #13]
 8000a42:	2301      	movs	r3, #1
 8000a44:	81fb      	strh	r3, [r7, #14]
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	743b      	strb	r3, [r7, #16]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	747b      	strb	r3, [r7, #17]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	74bb      	strb	r3, [r7, #18]
 8000a52:	2300      	movs	r3, #0
 8000a54:	74fb      	strb	r3, [r7, #19]
 8000a56:	2300      	movs	r3, #0
 8000a58:	753b      	strb	r3, [r7, #20]
 8000a5a:	23bb      	movs	r3, #187	; 0xbb
 8000a5c:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 8000a5e:	f107 010c 	add.w	r1, r7, #12
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	220a      	movs	r2, #10
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <etx_ota_send_resp+0x48>)
 8000a6a:	f002 fd15 	bl	8003498 <HAL_UART_Transmit>
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000558 	.word	0x20000558

08000a7c <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 8000a8c:	f000 ffcc 	bl	8001a28 <HAL_FLASH_Unlock>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d154      	bne.n	8000b48 <write_data_to_flash_app+0xcc>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 8000a9e:	787b      	ldrb	r3, [r7, #1]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d019      	beq.n	8000ad8 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 8000aa4:	482e      	ldr	r0, [pc, #184]	; (8000b60 <write_data_to_flash_app+0xe4>)
 8000aa6:	f003 fadd 	bl	8004064 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000aba:	f107 0208 	add.w	r2, r7, #8
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 f911 	bl	8001cec <HAL_FLASHEx_Erase>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 8000ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d139      	bne.n	8000b4c <write_data_to_flash_app+0xd0>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	e023      	b.n	8000b26 <write_data_to_flash_app+0xaa>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <write_data_to_flash_app+0xe8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4921      	ldr	r1, [pc, #132]	; (8000b68 <write_data_to_flash_app+0xec>)
 8000ae4:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[4+i]
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	461a      	mov	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 ff39 	bl	8001970 <HAL_FLASH_Program>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret == HAL_OK )
 8000b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d105      	bne.n	8000b18 <write_data_to_flash_app+0x9c>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <write_data_to_flash_app+0xe8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <write_data_to_flash_app+0xe8>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e003      	b.n	8000b20 <write_data_to_flash_app+0xa4>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000b18:	4814      	ldr	r0, [pc, #80]	; (8000b6c <write_data_to_flash_app+0xf0>)
 8000b1a:	f003 faa3 	bl	8004064 <puts>
        break;
 8000b1e:	e006      	b.n	8000b2e <write_data_to_flash_app+0xb2>
    for(int i = 0; i < data_len; i++ )
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	3301      	adds	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	6a3a      	ldr	r2, [r7, #32]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbd7      	blt.n	8000ade <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10c      	bne.n	8000b50 <write_data_to_flash_app+0xd4>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000b36:	f000 ff99 	bl	8001a6c <HAL_FLASH_Lock>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	e004      	b.n	8000b52 <write_data_to_flash_app+0xd6>
      break;
 8000b48:	bf00      	nop
 8000b4a:	e002      	b.n	8000b52 <write_data_to_flash_app+0xd6>
        break;
 8000b4c:	bf00      	nop
 8000b4e:	e000      	b.n	8000b52 <write_data_to_flash_app+0xd6>
      break;
 8000b50:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08005088 	.word	0x08005088
 8000b64:	200004a0 	.word	0x200004a0
 8000b68:	08040000 	.word	0x08040000
 8000b6c:	080050a8 	.word	0x080050a8

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fba0 	bl	80012ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f853 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f94f 	bl	8000e20 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b82:	f000 f91d 	bl	8000dc0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000b86:	f000 f8eb 	bl	8000d60 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000b8a:	f000 f8c7 	bl	8000d1c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  // Turn ON the Green Led to tell the user that Bootloader is running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2101      	movs	r1, #1
 8000b92:	481d      	ldr	r0, [pc, #116]	; (8000c08 <main+0x98>)
 8000b94:	f001 fb6c 	bl	8002270 <HAL_GPIO_WritePin>
  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	481b      	ldr	r0, [pc, #108]	; (8000c0c <main+0x9c>)
 8000ba0:	f003 f9da 	bl	8003f58 <iprintf>
  //HAL_Delay(2000);   //2sec delay for nothing

  /* Check the GPIO for 3 seconds */
  GPIO_PinState OTA_Pin_state;
  uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000ba4:	f000 fbda 	bl	800135c <HAL_GetTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000bae:	60fb      	str	r3, [r7, #12]

  printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <main+0xa0>)
 8000bb2:	f003 fa57 	bl	8004064 <puts>
  do
  {
    OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bba:	4816      	ldr	r0, [pc, #88]	; (8000c14 <main+0xa4>)
 8000bbc:	f001 fb40 	bl	8002240 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	72fb      	strb	r3, [r7, #11]
    uint32_t current_tick = HAL_GetTick();
 8000bc4:	f000 fbca 	bl	800135c <HAL_GetTick>
 8000bc8:	6078      	str	r0, [r7, #4]

    /* Check the button is pressed or not for 3seconds */
    if( ( OTA_Pin_state != GPIO_PIN_RESET ) || ( current_tick > end_tick ) )
 8000bca:	7afb      	ldrb	r3, [r7, #11]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <main+0x6a>
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d800      	bhi.n	8000bda <main+0x6a>
  {
 8000bd8:	e7ed      	b.n	8000bb6 <main+0x46>
      break;
    }
  }while( 1 );

  /*Start the Firmware or Application update */
  if( OTA_Pin_state == GPIO_PIN_SET )
 8000bda:	7afb      	ldrb	r3, [r7, #11]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d110      	bne.n	8000c02 <main+0x92>
  {
    printf("Starting Firmware Download!!!\r\n");
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <main+0xa8>)
 8000be2:	f003 fa3f 	bl	8004064 <puts>
    /* OTA Request. Receive the data from the UART4 and flash */
    if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000be6:	f7ff fcf7 	bl	80005d8 <etx_ota_download_and_flash>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <main+0x88>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000bf0:	480a      	ldr	r0, [pc, #40]	; (8000c1c <main+0xac>)
 8000bf2:	f003 fa37 	bl	8004064 <puts>
      while( 1 );
 8000bf6:	e7fe      	b.n	8000bf6 <main+0x86>
    }
    else
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <main+0xb0>)
 8000bfa:	f003 fa33 	bl	8004064 <puts>
      HAL_NVIC_SystemReset();
 8000bfe:	f000 fca8 	bl	8001552 <HAL_NVIC_SystemReset>
    }
  }

  // Jump to application
  goto_application();
 8000c02:	f000 f979 	bl	8000ef8 <goto_application>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <main+0x96>
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	080050bc 	.word	0x080050bc
 8000c10:	080050dc 	.word	0x080050dc
 8000c14:	40020800 	.word	0x40020800
 8000c18:	08005114 	.word	0x08005114
 8000c1c:	08005134 	.word	0x08005134
 8000c20:	08005154 	.word	0x08005154

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0b8      	sub	sp, #224	; 0xe0
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 f988 	bl	8003f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	2290      	movs	r2, #144	; 0x90
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 f979 	bl	8003f48 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <SystemClock_Config+0xf0>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <SystemClock_Config+0xf0>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <SystemClock_Config+0xf0>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <SystemClock_Config+0xf4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c76:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <SystemClock_Config+0xf4>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <SystemClock_Config+0xf4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	2310      	movs	r3, #16
 8000c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fafc 	bl	80022a4 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cb2:	f000 f93b 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fd90 	bl	8002800 <HAL_RCC_ClockConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ce6:	f000 f921 	bl	8000f2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8000cea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cee:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 ff55 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d08:	f000 f910 	bl	8000f2c <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	37e0      	adds	r7, #224	; 0xe0
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <MX_CRC_Init+0x40>)
 8000d24:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_CRC_Init+0x3c>)
 8000d46:	f000 fc15 	bl	8001574 <HAL_CRC_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d50:	f000 f8ec 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000534 	.word	0x20000534
 8000d5c:	40023000 	.word	0x40023000

08000d60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <MX_USART2_UART_Init+0x5c>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000da4:	f002 fb2a 	bl	80033fc <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dae:	f000 f8bd 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000558 	.word	0x20000558
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <MX_USART3_UART_Init+0x5c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000e04:	f002 fafa 	bl	80033fc <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e0e:	f000 f88d 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200004b0 	.word	0x200004b0
 8000e1c:	40004800 	.word	0x40004800

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_GPIO_Init+0xa8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2101      	movs	r1, #1
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <MX_GPIO_Init+0xac>)
 8000e84:	f001 f9f4 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_GPIO_Init+0xb0>)
 8000e9e:	f001 f823 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_GPIO_Init+0xac>)
 8000eba:	f001 f815 	bl	8001ee8 <HAL_GPIO_Init>

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f002 fad7 	bl	8003498 <HAL_UART_Transmit>

  return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200004b0 	.word	0x200004b0

08000ef8 <goto_application>:
/**
  * @brief Jump to application from the Bootloader
  * @retval None
  */
static void goto_application(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application\r\n");
 8000efe:	4808      	ldr	r0, [pc, #32]	; (8000f20 <goto_application+0x28>)
 8000f00:	f003 f8b0 	bl	8004064 <puts>

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08040000 + 4U)));
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <goto_application+0x2c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	607b      	str	r3, [r7, #4]

  //__set_MSP(*(volatile uint32_t*) 0x08040000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4806      	ldr	r0, [pc, #24]	; (8000f28 <goto_application+0x30>)
 8000f10:	f001 f9ae 	bl	8002270 <HAL_GPIO_WritePin>
  app_reset_handler();    //call the app reset handler
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4798      	blx	r3
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	08005180 	.word	0x08005180
 8000f24:	08040004 	.word	0x08040004
 8000f28:	40020400 	.word	0x40020400

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_MspInit+0x44>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_MspInit+0x44>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_MspInit+0x44>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_MspInit+0x44>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_MspInit+0x44>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_MspInit+0x44>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_CRC_MspInit+0x38>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10b      	bne.n	8000faa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000f98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_CRC_MspInit+0x3c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023000 	.word	0x40023000
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <HAL_UART_MspInit+0xd8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d128      	bne.n	8001034 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001022:	2307      	movs	r3, #7
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <HAL_UART_MspInit+0xe0>)
 800102e:	f000 ff5b 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001032:	e02d      	b.n	8001090 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_UART_MspInit+0xe4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d128      	bne.n	8001090 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_UART_MspInit+0xdc>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_UART_MspInit+0xdc>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800106e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001080:	2307      	movs	r3, #7
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_UART_MspInit+0xe0>)
 800108c:	f000 ff2c 	bl	8001ee8 <HAL_GPIO_Init>
}
 8001090:	bf00      	nop
 8001092:	3730      	adds	r7, #48	; 0x30
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40004400 	.word	0x40004400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40004800 	.word	0x40004800

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <NMI_Handler+0x4>

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f4:	f000 f91e 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
	}

return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e009      	b.n	800115c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff febf 	bl	8000ed4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf1      	blt.n	8001148 <_write+0x12>
	}
	return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_close>:

int _close(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001196:	605a      	str	r2, [r3, #4]
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_isatty>:

int _isatty(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <_sbrk+0x5c>)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <_sbrk+0x60>)
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x64>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <_sbrk+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	429a      	cmp	r2, r3
 8001206:	d207      	bcs.n	8001218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001208:	f002 fe74 	bl	8003ef4 <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	220c      	movs	r2, #12
 8001210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e009      	b.n	800122c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <_sbrk+0x64>)
 8001228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20080000 	.word	0x20080000
 8001238:	00000400 	.word	0x00000400
 800123c:	200004a4 	.word	0x200004a4
 8001240:	20000610 	.word	0x20000610

08001244 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001284:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001292:	f7ff ffd7 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f002 fe33 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff fc69 	bl	8000b70 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012ac:	0800525c 	.word	0x0800525c
  ldr r2, =_sbss
 80012b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012b4:	2000060c 	.word	0x2000060c

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>

080012ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012be:	2003      	movs	r0, #3
 80012c0:	f000 f920 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f805 	bl	80012d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012ca:	f7ff fe35 	bl	8000f38 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f931 	bl	800155a <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f903 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	200005dc 	.word	0x200005dc

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200005dc 	.word	0x200005dc

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	05fa0000 	.word	0x05fa0000

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001498:	f3bf 8f4f 	dsb	sy
}
 800149c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <__NVIC_SystemReset+0x24>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014a6:	4904      	ldr	r1, [pc, #16]	; (80014b8 <__NVIC_SystemReset+0x24>)
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_SystemReset+0x28>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ae:	f3bf 8f4f 	dsb	sy
}
 80014b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <__NVIC_SystemReset+0x20>
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	05fa0004 	.word	0x05fa0004

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff78 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff46 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff78 	bl	800142c <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff47 	bl	80013d8 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001556:	f7ff ff9d 	bl	8001494 <__NVIC_SystemReset>

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffac 	bl	80014c0 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e054      	b.n	8001630 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7f5b      	ldrb	r3, [r3, #29]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fcf2 	bl	8000f80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2202      	movs	r2, #2
 80015a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a22      	ldr	r2, [pc, #136]	; (8001638 <HAL_CRC_Init+0xc4>)
 80015b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0218 	bic.w	r2, r2, #24
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	e00c      	b.n	80015de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	461a      	mov	r2, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f948 	bl	8001864 <HAL_CRCEx_Polynomial_Set>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e028      	b.n	8001630 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	795b      	ldrb	r3, [r3, #5]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	e004      	b.n	80015fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6912      	ldr	r2, [r2, #16]
 80015fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	04c11db7 	.word	0x04c11db7

0800163c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2202      	movs	r2, #2
 8001650:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d006      	beq.n	8001678 <HAL_CRC_Calculate+0x3c>
 800166a:	2b03      	cmp	r3, #3
 800166c:	d829      	bhi.n	80016c2 <HAL_CRC_Calculate+0x86>
 800166e:	2b01      	cmp	r3, #1
 8001670:	d019      	beq.n	80016a6 <HAL_CRC_Calculate+0x6a>
 8001672:	2b02      	cmp	r3, #2
 8001674:	d01e      	beq.n	80016b4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001676:	e024      	b.n	80016c2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	441a      	add	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3f0      	bcc.n	800167e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
      break;
 80016a4:	e00e      	b.n	80016c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f812 	bl	80016d4 <CRC_Handle_8>
 80016b0:	6138      	str	r0, [r7, #16]
      break;
 80016b2:	e007      	b.n	80016c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f899 	bl	80017f0 <CRC_Handle_16>
 80016be:	6138      	str	r0, [r7, #16]
      break;
 80016c0:	e000      	b.n	80016c4 <HAL_CRC_Calculate+0x88>
      break;
 80016c2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80016ca:	693b      	ldr	r3, [r7, #16]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	e023      	b.n	800172e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	3301      	adds	r3, #1
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	440b      	add	r3, r1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001700:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	440b      	add	r3, r1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001710:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	3303      	adds	r3, #3
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	440b      	add	r3, r1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001724:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	3301      	adds	r3, #1
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3d6      	bcc.n	80016e6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d04d      	beq.n	80017de <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d107      	bne.n	800175c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d116      	bne.n	8001794 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	3301      	adds	r3, #1
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	440b      	add	r3, r1
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21b      	sxth	r3, r3
 8001786:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	8b7a      	ldrh	r2, [r7, #26]
 8001792:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b03      	cmp	r3, #3
 800179c:	d11f      	bne.n	80017de <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	3301      	adds	r3, #1
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	440b      	add	r3, r1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	8b7a      	ldrh	r2, [r7, #26]
 80017ca:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3724      	adds	r7, #36	; 0x24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e013      	b.n	800182a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4413      	add	r3, r2
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	440b      	add	r3, r1
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	d3e6      	bcc.n	8001802 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001874:	231f      	movs	r3, #31
 8001876:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001878:	bf00      	nop
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	613a      	str	r2, [r7, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_CRCEx_Polynomial_Set+0x34>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_CRCEx_Polynomial_Set+0x16>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b18      	cmp	r3, #24
 800189c:	d846      	bhi.n	800192c <HAL_CRCEx_Polynomial_Set+0xc8>
 800189e:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	08001933 	.word	0x08001933
 80018a8:	0800192d 	.word	0x0800192d
 80018ac:	0800192d 	.word	0x0800192d
 80018b0:	0800192d 	.word	0x0800192d
 80018b4:	0800192d 	.word	0x0800192d
 80018b8:	0800192d 	.word	0x0800192d
 80018bc:	0800192d 	.word	0x0800192d
 80018c0:	0800192d 	.word	0x0800192d
 80018c4:	08001921 	.word	0x08001921
 80018c8:	0800192d 	.word	0x0800192d
 80018cc:	0800192d 	.word	0x0800192d
 80018d0:	0800192d 	.word	0x0800192d
 80018d4:	0800192d 	.word	0x0800192d
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800192d 	.word	0x0800192d
 80018e4:	08001915 	.word	0x08001915
 80018e8:	0800192d 	.word	0x0800192d
 80018ec:	0800192d 	.word	0x0800192d
 80018f0:	0800192d 	.word	0x0800192d
 80018f4:	0800192d 	.word	0x0800192d
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	0800192d 	.word	0x0800192d
 8001904:	08001909 	.word	0x08001909
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2b06      	cmp	r3, #6
 800190c:	d913      	bls.n	8001936 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001912:	e010      	b.n	8001936 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d90f      	bls.n	800193a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800191e:	e00c      	b.n	800193a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	2b0f      	cmp	r3, #15
 8001924:	d90b      	bls.n	800193e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800192a:	e008      	b.n	800193e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	75fb      	strb	r3, [r7, #23]
      break;
 8001930:	e006      	b.n	8001940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001932:	bf00      	nop
 8001934:	e004      	b.n	8001940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001936:	bf00      	nop
 8001938:	e002      	b.n	8001940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800193a:	bf00      	nop
 800193c:	e000      	b.n	8001940 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800193e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10d      	bne.n	8001962 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 0118 	bic.w	r1, r3, #24
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	430a      	orrs	r2, r1
 8001960:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001962:	7dfb      	ldrb	r3, [r7, #23]
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_FLASH_Program+0xb0>)
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_FLASH_Program+0x1e>
 800198a:	2302      	movs	r3, #2
 800198c:	e043      	b.n	8001a16 <HAL_FLASH_Program+0xa6>
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_FLASH_Program+0xb0>)
 8001990:	2201      	movs	r2, #1
 8001992:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001994:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001998:	f000 f878 	bl	8001a8c <FLASH_WaitForLastOperation>
 800199c:	4603      	mov	r3, r0
 800199e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d133      	bne.n	8001a0e <HAL_FLASH_Program+0x9e>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d823      	bhi.n	80019f4 <HAL_FLASH_Program+0x84>
 80019ac:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <HAL_FLASH_Program+0x44>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019d1 	.word	0x080019d1
 80019bc:	080019dd 	.word	0x080019dd
 80019c0:	080019e9 	.word	0x080019e9
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80019c4:	783b      	ldrb	r3, [r7, #0]
 80019c6:	4619      	mov	r1, r3
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f000 f921 	bl	8001c10 <FLASH_Program_Byte>
        break;
 80019ce:	e012      	b.n	80019f6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019d0:	883b      	ldrh	r3, [r7, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	68b8      	ldr	r0, [r7, #8]
 80019d6:	f000 f8f5 	bl	8001bc4 <FLASH_Program_HalfWord>
        break;
 80019da:	e00c      	b.n	80019f6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	68b8      	ldr	r0, [r7, #8]
 80019e2:	f000 f8c9 	bl	8001b78 <FLASH_Program_Word>
        break;
 80019e6:	e006      	b.n	80019f6 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80019e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ec:	68b8      	ldr	r0, [r7, #8]
 80019ee:	f000 f88d 	bl	8001b0c <FLASH_Program_DoubleWord>
        break;
 80019f2:	e000      	b.n	80019f6 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80019f4:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019fa:	f000 f847 	bl	8001a8c <FLASH_WaitForLastOperation>
 80019fe:	4603      	mov	r3, r0
 8001a00:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_FLASH_Program+0xb4>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_FLASH_Program+0xb4>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_FLASH_Program+0xb0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	751a      	strb	r2, [r3, #20]

  return status;
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200005e0 	.word	0x200005e0
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_FLASH_Unlock+0x38>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	da0b      	bge.n	8001a52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_FLASH_Unlock+0x38>)
 8001a3c:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_FLASH_Unlock+0x3c>)
 8001a3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_FLASH_Unlock+0x38>)
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_FLASH_Unlock+0x40>)
 8001a44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_FLASH_Unlock+0x38>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da01      	bge.n	8001a52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a52:	79fb      	ldrb	r3, [r7, #7]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	45670123 	.word	0x45670123
 8001a68:	cdef89ab 	.word	0xcdef89ab

08001a6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_FLASH_Lock+0x1c>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_FLASH_Lock+0x1c>)
 8001a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a7a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40023c00 	.word	0x40023c00

08001a8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <FLASH_WaitForLastOperation+0x78>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9e:	f7ff fc5d 	bl	800135c <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001aa4:	e010      	b.n	8001ac8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d00c      	beq.n	8001ac8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <FLASH_WaitForLastOperation+0x38>
 8001ab4:	f7ff fc52 	bl	800135c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d201      	bcs.n	8001ac8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e019      	b.n	8001afc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <FLASH_WaitForLastOperation+0x7c>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e8      	bne.n	8001aa6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <FLASH_WaitForLastOperation+0x7c>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ae0:	f000 f8ba 	bl	8001c58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e009      	b.n	8001afc <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <FLASH_WaitForLastOperation+0x7c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <FLASH_WaitForLastOperation+0x7c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
  
}  
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200005e0 	.word	0x200005e0
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <FLASH_Program_DoubleWord+0x68>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <FLASH_Program_DoubleWord+0x68>)
 8001b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <FLASH_Program_DoubleWord+0x68>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <FLASH_Program_DoubleWord+0x68>)
 8001b2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <FLASH_Program_DoubleWord+0x68>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <FLASH_Program_DoubleWord+0x68>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001b42:	f3bf 8f6f 	isb	sy
}
 8001b46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	000a      	movs	r2, r1
 8001b56:	2300      	movs	r3, #0
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	3104      	adds	r1, #4
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b60:	f3bf 8f4f 	dsb	sy
}
 8001b64:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <FLASH_Program_Word+0x48>)
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <FLASH_Program_Word+0x48>)
 8001b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <FLASH_Program_Word+0x48>)
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <FLASH_Program_Word+0x48>)
 8001b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <FLASH_Program_Word+0x48>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <FLASH_Program_Word+0x48>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bac:	f3bf 8f4f 	dsb	sy
}
 8001bb0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <FLASH_Program_HalfWord+0x48>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <FLASH_Program_HalfWord+0x48>)
 8001bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <FLASH_Program_HalfWord+0x48>)
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <FLASH_Program_HalfWord+0x48>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <FLASH_Program_HalfWord+0x48>)
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <FLASH_Program_HalfWord+0x48>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bfa:	f3bf 8f4f 	dsb	sy
}
 8001bfe:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <FLASH_Program_Byte+0x44>)
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <FLASH_Program_Byte+0x44>)
 8001c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <FLASH_Program_Byte+0x44>)
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <FLASH_Program_Byte+0x44>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <FLASH_Program_Byte+0x44>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <FLASH_Program_Byte+0x44>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c42:	f3bf 8f4f 	dsb	sy
}
 8001c46:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <FLASH_SetErrorCode+0x8c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f043 0320 	orr.w	r3, r3, #32
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001c72:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <FLASH_SetErrorCode+0x8c>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001c8a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <FLASH_SetErrorCode+0x8c>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001ca2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <FLASH_SetErrorCode+0x8c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001cba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <FLASH_SetErrorCode+0x8c>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <FLASH_SetErrorCode+0x90>)
 8001cd2:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <FLASH_SetErrorCode+0x8c>)
 8001cd6:	22f2      	movs	r2, #242	; 0xf2
 8001cd8:	60da      	str	r2, [r3, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40023c00 	.word	0x40023c00
 8001ce8:	200005e0 	.word	0x200005e0

08001cec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_FLASHEx_Erase+0xd4>)
 8001d00:	7d1b      	ldrb	r3, [r3, #20]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_FLASHEx_Erase+0x1e>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e056      	b.n	8001db8 <HAL_FLASHEx_Erase+0xcc>
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_FLASHEx_Erase+0xd4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d14:	f7ff feba 	bl	8001a8c <FLASH_WaitForLastOperation>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d146      	bne.n	8001db0 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d115      	bne.n	8001d5e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f844 	bl	8001dcc <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d48:	f7ff fea0 	bl	8001a8c <FLASH_WaitForLastOperation>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_FLASHEx_Erase+0xd8>)
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	491b      	ldr	r1, [pc, #108]	; (8001dc4 <HAL_FLASHEx_Erase+0xd8>)
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_FLASHEx_Erase+0xdc>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	610b      	str	r3, [r1, #16]
 8001d5c:	e028      	b.n	8001db0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	e01c      	b.n	8001da0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68b8      	ldr	r0, [r7, #8]
 8001d70:	f000 f868 	bl	8001e44 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d78:	f7ff fe88 	bl	8001a8c <FLASH_WaitForLastOperation>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_FLASHEx_Erase+0xd8>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_FLASHEx_Erase+0xd8>)
 8001d86:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d8a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	601a      	str	r2, [r3, #0]
          break;
 8001d98:	e00a      	b.n	8001db0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4413      	add	r3, r2
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3da      	bcc.n	8001d66 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_FLASHEx_Erase+0xd4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	751a      	strb	r2, [r3, #20]

  return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200005e0 	.word	0x200005e0
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	ffff7ffb 	.word	0xffff7ffb

08001dcc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <FLASH_MassErase+0x74>)
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <FLASH_MassErase+0x74>)
 8001dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de2:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d107      	bne.n	8001dfa <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <FLASH_MassErase+0x74>)
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	4914      	ldr	r1, [pc, #80]	; (8001e40 <FLASH_MassErase+0x74>)
 8001df0:	f248 0304 	movw	r3, #32772	; 0x8004
 8001df4:	4313      	orrs	r3, r2
 8001df6:	610b      	str	r3, [r1, #16]
 8001df8:	e00f      	b.n	8001e1a <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d106      	bne.n	8001e0e <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <FLASH_MassErase+0x74>)
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <FLASH_MassErase+0x74>)
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	6113      	str	r3, [r2, #16]
 8001e0c:	e005      	b.n	8001e1a <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <FLASH_MassErase+0x74>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <FLASH_MassErase+0x74>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <FLASH_MassErase+0x74>)
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	4313      	orrs	r3, r2
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <FLASH_MassErase+0x74>)
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2c:	f3bf 8f4f 	dsb	sy
}
 8001e30:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	e010      	b.n	8001e82 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d103      	bne.n	8001e6e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e009      	b.n	8001e82 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d103      	bne.n	8001e7c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e002      	b.n	8001e82 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0b      	cmp	r3, #11
 8001e86:	d902      	bls.n	8001e8e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	4911      	ldr	r1, [pc, #68]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <FLASH_Erase_Sector+0xa0>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed0:	f3bf 8f4f 	dsb	sy
}
 8001ed4:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e175      	b.n	80021f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8164 	bne.w	80021ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d00b      	beq.n	8001f46 <HAL_GPIO_Init+0x5e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3a:	2b11      	cmp	r3, #17
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d130      	bne.n	8001fa8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 0201 	and.w	r2, r3, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x100>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80be 	beq.w	80021ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_GPIO_Init+0x324>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a65      	ldr	r2, [pc, #404]	; (800220c <HAL_GPIO_Init+0x324>)
 8002078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_GPIO_Init+0x324>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800208a:	4a61      	ldr	r2, [pc, #388]	; (8002210 <HAL_GPIO_Init+0x328>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <HAL_GPIO_Init+0x32c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d037      	beq.n	8002126 <HAL_GPIO_Init+0x23e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_GPIO_Init+0x330>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d031      	beq.n	8002122 <HAL_GPIO_Init+0x23a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_GPIO_Init+0x334>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02b      	beq.n	800211e <HAL_GPIO_Init+0x236>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_GPIO_Init+0x338>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d025      	beq.n	800211a <HAL_GPIO_Init+0x232>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a54      	ldr	r2, [pc, #336]	; (8002224 <HAL_GPIO_Init+0x33c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <HAL_GPIO_Init+0x22e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a53      	ldr	r2, [pc, #332]	; (8002228 <HAL_GPIO_Init+0x340>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d019      	beq.n	8002112 <HAL_GPIO_Init+0x22a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_GPIO_Init+0x344>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0x226>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a51      	ldr	r2, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x348>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00d      	beq.n	800210a <HAL_GPIO_Init+0x222>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a50      	ldr	r2, [pc, #320]	; (8002234 <HAL_GPIO_Init+0x34c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x21e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4f      	ldr	r2, [pc, #316]	; (8002238 <HAL_GPIO_Init+0x350>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_GPIO_Init+0x21a>
 80020fe:	2309      	movs	r3, #9
 8002100:	e012      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002102:	230a      	movs	r3, #10
 8002104:	e010      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002106:	2308      	movs	r3, #8
 8002108:	e00e      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800210a:	2307      	movs	r3, #7
 800210c:	e00c      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800210e:	2306      	movs	r3, #6
 8002110:	e00a      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002112:	2305      	movs	r3, #5
 8002114:	e008      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002116:	2304      	movs	r3, #4
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800211a:	2303      	movs	r3, #3
 800211c:	e004      	b.n	8002128 <HAL_GPIO_Init+0x240>
 800211e:	2302      	movs	r3, #2
 8002120:	e002      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x240>
 8002126:	2300      	movs	r3, #0
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f002 0203 	and.w	r2, r2, #3
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	4093      	lsls	r3, r2
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002138:	4935      	ldr	r1, [pc, #212]	; (8002210 <HAL_GPIO_Init+0x328>)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_GPIO_Init+0x354>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_GPIO_Init+0x354>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <HAL_GPIO_Init+0x354>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_GPIO_Init+0x354>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <HAL_GPIO_Init+0x354>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_GPIO_Init+0x354>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_GPIO_Init+0x354>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_GPIO_Init+0x354>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3301      	adds	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b0f      	cmp	r3, #15
 80021f8:	f67f ae86 	bls.w	8001f08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40013800 	.word	0x40013800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400
 800221c:	40020800 	.word	0x40020800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40021400 	.word	0x40021400
 800222c:	40021800 	.word	0x40021800
 8002230:	40021c00 	.word	0x40021c00
 8002234:	40022000 	.word	0x40022000
 8002238:	40022400 	.word	0x40022400
 800223c:	40013c00 	.word	0x40013c00

08002240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e001      	b.n	8002262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e29b      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8087 	beq.w	80023d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c8:	4b96      	ldr	r3, [pc, #600]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d00c      	beq.n	80022ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d4:	4b93      	ldr	r3, [pc, #588]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d112      	bne.n	8002306 <HAL_RCC_OscConfig+0x62>
 80022e0:	4b90      	ldr	r3, [pc, #576]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ec:	d10b      	bne.n	8002306 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ee:	4b8d      	ldr	r3, [pc, #564]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d06c      	beq.n	80023d4 <HAL_RCC_OscConfig+0x130>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d168      	bne.n	80023d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e275      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x7a>
 8002310:	4b84      	ldr	r3, [pc, #528]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a83      	ldr	r2, [pc, #524]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	e02e      	b.n	800237c <HAL_RCC_OscConfig+0xd8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10c      	bne.n	8002340 <HAL_RCC_OscConfig+0x9c>
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b7c      	ldr	r3, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7b      	ldr	r2, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xd8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0xc0>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a72      	ldr	r2, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xd8>
 8002364:	4b6f      	ldr	r3, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6e      	ldr	r2, [pc, #440]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6b      	ldr	r2, [pc, #428]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ffea 	bl	800135c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe ffe6 	bl	800135c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e229      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xe8>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe ffd6 	bl	800135c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe ffd2 	bl	800135c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e215      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x110>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d069      	beq.n	80024b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x190>
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x17a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1e9      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	493d      	ldr	r1, [pc, #244]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	e040      	b.n	80024b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe ff88 	bl	800135c <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe ff84 	bl	800135c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1c7      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4929      	ldr	r1, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]
 8002482:	e018      	b.n	80024b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe ff64 	bl	800135c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7fe ff60 	bl	800135c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1a3      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d038      	beq.n	8002534 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d019      	beq.n	80024fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80024cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe ff41 	bl	800135c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe ff3d 	bl	800135c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e180      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x23a>
 80024fc:	e01a      	b.n	8002534 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x280>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe ff27 	bl	800135c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe ff23 	bl	800135c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d903      	bls.n	8002528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e166      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
 8002524:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ee      	bne.n	8002512 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a4 	beq.w	800268a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10d      	bne.n	800256a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a88      	ldr	r2, [pc, #544]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b86      	ldr	r3, [pc, #536]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256a:	4b83      	ldr	r3, [pc, #524]	; (8002778 <HAL_RCC_OscConfig+0x4d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002576:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x4d4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7f      	ldr	r2, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x4d4>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe feeb 	bl	800135c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe fee7 	bl	800135c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e12a      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259c:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x4d4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x31a>
 80025b0:	4b70      	ldr	r3, [pc, #448]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a6f      	ldr	r2, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e02d      	b.n	800261a <HAL_RCC_OscConfig+0x376>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x33c>
 80025c6:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a6a      	ldr	r2, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a67      	ldr	r2, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025d8:	f023 0304 	bic.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	e01c      	b.n	800261a <HAL_RCC_OscConfig+0x376>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x35e>
 80025e8:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a61      	ldr	r2, [pc, #388]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a5e      	ldr	r2, [pc, #376]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0x376>
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fe9b 	bl	800135c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fe97 	bl	800135c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0d8      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ee      	beq.n	800262a <HAL_RCC_OscConfig+0x386>
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe fe85 	bl	800135c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fe81 	bl	800135c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0c2      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a3c      	ldr	r2, [pc, #240]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80ae 	beq.w	80027f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002694:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b08      	cmp	r3, #8
 800269e:	d06d      	beq.n	800277c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d14b      	bne.n	8002740 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a8:	4b32      	ldr	r3, [pc, #200]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a31      	ldr	r2, [pc, #196]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fe52 	bl	800135c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fe4e 	bl	800135c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e091      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	3b01      	subs	r3, #1
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	071b      	lsls	r3, r3, #28
 8002706:	491b      	ldr	r1, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fe20 	bl	800135c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fe1c 	bl	800135c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e05f      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x47c>
 800273e:	e057      	b.n	80027f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fe06 	bl	800135c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fe02 	bl	800135c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e045      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_RCC_OscConfig+0x4d0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x4b0>
 8002772:	e03d      	b.n	80027f0 <HAL_RCC_OscConfig+0x54c>
 8002774:	40023800 	.word	0x40023800
 8002778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_RCC_OscConfig+0x558>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d030      	beq.n	80027ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d129      	bne.n	80027ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d122      	bne.n	80027ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d119      	bne.n	80027ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d10f      	bne.n	80027ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0d0      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d910      	bls.n	8002848 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 020f 	bic.w	r2, r3, #15
 800282e:	4965      	ldr	r1, [pc, #404]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800286a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d040      	beq.n	8002924 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e073      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4936      	ldr	r1, [pc, #216]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe fd32 	bl	800135c <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7fe fd2e 	bl	800135c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e053      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d210      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 020f 	bic.w	r2, r3, #15
 800293a:	4922      	ldr	r1, [pc, #136]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f821 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002996:	4602      	mov	r2, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x1c8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	490a      	ldr	r1, [pc, #40]	; (80029cc <HAL_RCC_ClockConfig+0x1cc>)
 80029a4:	5ccb      	ldrb	r3, [r1, r3]
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1d0>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1d4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fc8e 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023c00 	.word	0x40023c00
 80029c8:	40023800 	.word	0x40023800
 80029cc:	0800519c 	.word	0x0800519c
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029de:	2100      	movs	r1, #0
 80029e0:	6079      	str	r1, [r7, #4]
 80029e2:	2100      	movs	r1, #0
 80029e4:	60f9      	str	r1, [r7, #12]
 80029e6:	2100      	movs	r1, #0
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80029ea:	2100      	movs	r1, #0
 80029ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ee:	4952      	ldr	r1, [pc, #328]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f0:	6889      	ldr	r1, [r1, #8]
 80029f2:	f001 010c 	and.w	r1, r1, #12
 80029f6:	2908      	cmp	r1, #8
 80029f8:	d00d      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x3e>
 80029fa:	2908      	cmp	r1, #8
 80029fc:	f200 8094 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x150>
 8002a00:	2900      	cmp	r1, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x32>
 8002a04:	2904      	cmp	r1, #4
 8002a06:	d003      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x38>
 8002a08:	e08e      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a0a:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x164>)
 8002a0c:	60bb      	str	r3, [r7, #8]
      break;
 8002a0e:	e08e      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a12:	60bb      	str	r3, [r7, #8]
      break;
 8002a14:	e08b      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a16:	4948      	ldr	r1, [pc, #288]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a18:	6849      	ldr	r1, [r1, #4]
 8002a1a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a1e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a20:	4945      	ldr	r1, [pc, #276]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a22:	6849      	ldr	r1, [r1, #4]
 8002a24:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d024      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2c:	4942      	ldr	r1, [pc, #264]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a2e:	6849      	ldr	r1, [r1, #4]
 8002a30:	0989      	lsrs	r1, r1, #6
 8002a32:	4608      	mov	r0, r1
 8002a34:	f04f 0100 	mov.w	r1, #0
 8002a38:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a3c:	f04f 0500 	mov.w	r5, #0
 8002a40:	ea00 0204 	and.w	r2, r0, r4
 8002a44:	ea01 0305 	and.w	r3, r1, r5
 8002a48:	493d      	ldr	r1, [pc, #244]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a4a:	fb01 f003 	mul.w	r0, r1, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	fb01 f102 	mul.w	r1, r1, r2
 8002a54:	1844      	adds	r4, r0, r1
 8002a56:	493a      	ldr	r1, [pc, #232]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a58:	fba2 0101 	umull	r0, r1, r2, r1
 8002a5c:	1863      	adds	r3, r4, r1
 8002a5e:	4619      	mov	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f7fd fc3a 	bl	80002e0 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e04a      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	ea02 0400 	and.w	r4, r2, r0
 8002a8e:	ea03 0501 	and.w	r5, r3, r1
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	014b      	lsls	r3, r1, #5
 8002aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002aa4:	0142      	lsls	r2, r0, #5
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	1b00      	subs	r0, r0, r4
 8002aac:	eb61 0105 	sbc.w	r1, r1, r5
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	018b      	lsls	r3, r1, #6
 8002aba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002abe:	0182      	lsls	r2, r0, #6
 8002ac0:	1a12      	subs	r2, r2, r0
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	00d9      	lsls	r1, r3, #3
 8002ad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad4:	00d0      	lsls	r0, r2, #3
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	1912      	adds	r2, r2, r4
 8002adc:	eb45 0303 	adc.w	r3, r5, r3
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	0299      	lsls	r1, r3, #10
 8002aea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002aee:	0290      	lsls	r0, r2, #10
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f7fd fbee 	bl	80002e0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60bb      	str	r3, [r7, #8]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x164>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	017d7840 	.word	0x017d7840

08002b44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a9b      	lsrs	r3, r3, #10
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	080051ac 	.word	0x080051ac

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b88:	f7ff ffdc 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	0b5b      	lsrs	r3, r3, #13
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	4903      	ldr	r1, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	080051ac 	.word	0x080051ac

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bd4:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	4964      	ldr	r1, [pc, #400]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d017      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c06:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	4959      	ldr	r1, [pc, #356]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c24:	d101      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c42:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	494a      	ldr	r1, [pc, #296]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c60:	d101      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 808b 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c90:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fb52 	bl	800135c <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fe fb4e 	bl	800135c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e38f      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d035      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d02e      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d114      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fb16 	bl	800135c <HAL_GetTick>
 8002d30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fb12 	bl	800135c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e351      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ee      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d62:	d111      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	4901      	ldr	r1, [pc, #4]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000
 8002d84:	0ffffcff 	.word	0x0ffffcff
 8002d88:	4bb3      	ldr	r3, [pc, #716]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4ab2      	ldr	r2, [pc, #712]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d92:	6093      	str	r3, [r2, #8]
 8002d94:	4bb0      	ldr	r3, [pc, #704]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	49ad      	ldr	r1, [pc, #692]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d010      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002db2:	4ba9      	ldr	r3, [pc, #676]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db8:	4aa7      	ldr	r2, [pc, #668]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dc2:	4ba5      	ldr	r3, [pc, #660]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	49a2      	ldr	r1, [pc, #648]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de0:	4b9d      	ldr	r3, [pc, #628]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dee:	499a      	ldr	r1, [pc, #616]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e02:	4b95      	ldr	r3, [pc, #596]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e10:	4991      	ldr	r1, [pc, #580]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e24:	4b8c      	ldr	r3, [pc, #560]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e32:	4989      	ldr	r1, [pc, #548]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e46:	4b84      	ldr	r3, [pc, #528]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4980      	ldr	r1, [pc, #512]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e68:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4978      	ldr	r1, [pc, #480]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f023 020c 	bic.w	r2, r3, #12
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	496f      	ldr	r1, [pc, #444]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eba:	4967      	ldr	r1, [pc, #412]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ece:	4b62      	ldr	r3, [pc, #392]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	495e      	ldr	r1, [pc, #376]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	4956      	ldr	r1, [pc, #344]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f12:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	494d      	ldr	r1, [pc, #308]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f34:	4b48      	ldr	r3, [pc, #288]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	4945      	ldr	r1, [pc, #276]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f56:	4b40      	ldr	r3, [pc, #256]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f64:	493c      	ldr	r1, [pc, #240]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f78:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f86:	4934      	ldr	r1, [pc, #208]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa8:	492b      	ldr	r1, [pc, #172]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe8:	491b      	ldr	r1, [pc, #108]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300c:	4912      	ldr	r1, [pc, #72]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003030:	4909      	ldr	r1, [pc, #36]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	4986      	ldr	r1, [pc, #536]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003070:	4b81      	ldr	r3, [pc, #516]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003076:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003080:	497d      	ldr	r1, [pc, #500]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d006      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80d6 	beq.w	8003248 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800309c:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a75      	ldr	r2, [pc, #468]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a8:	f7fe f958 	bl	800135c <HAL_GetTick>
 80030ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030b0:	f7fe f954 	bl	800135c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e195      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d021      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11d      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e8:	0c1b      	lsrs	r3, r3, #16
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030f0:	4b61      	ldr	r3, [pc, #388]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	0e1b      	lsrs	r3, r3, #24
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	019a      	lsls	r2, r3, #6
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	4958      	ldr	r1, [pc, #352]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800313c:	2b00      	cmp	r3, #0
 800313e:	d02e      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003148:	d129      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800314a:	4b4b      	ldr	r3, [pc, #300]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003158:	4b47      	ldr	r3, [pc, #284]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	0f1b      	lsrs	r3, r3, #28
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	019a      	lsls	r2, r3, #6
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	493e      	ldr	r1, [pc, #248]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318c:	f023 021f 	bic.w	r2, r3, #31
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	3b01      	subs	r3, #1
 8003196:	4938      	ldr	r1, [pc, #224]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01d      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031aa:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b0:	0e1b      	lsrs	r3, r3, #24
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031b8:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031be:	0f1b      	lsrs	r3, r3, #28
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	071b      	lsls	r3, r3, #28
 80031de:	4926      	ldr	r1, [pc, #152]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d011      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	019a      	lsls	r2, r3, #6
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	071b      	lsls	r3, r3, #28
 800320e:	491a      	ldr	r1, [pc, #104]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003222:	f7fe f89b 	bl	800135c <HAL_GetTick>
 8003226:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800322a:	f7fe f897 	bl	800135c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b64      	cmp	r3, #100	; 0x64
 8003236:	d901      	bls.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0d8      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	f040 80ce 	bne.w	80033ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a08      	ldr	r2, [pc, #32]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325c:	f7fe f87e 	bl	800135c <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003262:	e00b      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003264:	f7fe f87a 	bl	800135c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d904      	bls.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e0bb      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003288:	d0ec      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d02e      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d12a      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032b2:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032c0:	4b4d      	ldr	r3, [pc, #308]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c6:	0f1b      	lsrs	r3, r3, #28
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	019a      	lsls	r2, r3, #6
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	071b      	lsls	r3, r3, #28
 80032e6:	4944      	ldr	r1, [pc, #272]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032ee:	4b42      	ldr	r3, [pc, #264]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	493d      	ldr	r1, [pc, #244]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d022      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800331c:	d11d      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800331e:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	0e1b      	lsrs	r3, r3, #24
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	0f1b      	lsrs	r3, r3, #28
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	019a      	lsls	r2, r3, #6
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	061b      	lsls	r3, r3, #24
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	4929      	ldr	r1, [pc, #164]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d028      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	0e1b      	lsrs	r3, r3, #24
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	0c1b      	lsrs	r3, r3, #16
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	019a      	lsls	r2, r3, #6
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	061b      	lsls	r3, r3, #24
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	4917      	ldr	r1, [pc, #92]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	4911      	ldr	r1, [pc, #68]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c4:	f7fd ffca 	bl	800135c <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033cc:	f7fd ffc6 	bl	800135c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e007      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ea:	d1ef      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800

080033fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e040      	b.n	8003490 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fdce 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f990 	bl	8003760 <UART_SetConfig>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e022      	b.n	8003490 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fbe6 	bl	8003c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fc6d 	bl	8003d68 <UART_CheckIdleState>
 800348e:	4603      	mov	r3, r0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	f040 8081 	bne.w	80035b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_UART_Transmit+0x26>
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e079      	b.n	80035b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Transmit+0x38>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e072      	b.n	80035b6 <HAL_UART_Transmit+0x11e>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2221      	movs	r2, #33	; 0x21
 80034e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e6:	f7fd ff39 	bl	800135c <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d108      	bne.n	8003518 <HAL_UART_Transmit+0x80>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e003      	b.n	8003520 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003528:	e02c      	b.n	8003584 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2200      	movs	r2, #0
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fc60 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e038      	b.n	80035b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10b      	bne.n	8003562 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3302      	adds	r3, #2
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	e007      	b.n	8003572 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	3301      	adds	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1cc      	bne.n	800352a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fc2d 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e005      	b.n	80035b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	; 0x28
 80035c2:	af02      	add	r7, sp, #8
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 80be 	bne.w	8003754 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Receive+0x26>
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b6      	b.n	8003756 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Receive+0x38>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0af      	b.n	8003756 <HAL_UART_Receive+0x198>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2222      	movs	r2, #34	; 0x22
 800360a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fd fea3 	bl	800135c <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003630:	d10e      	bne.n	8003650 <HAL_UART_Receive+0x92>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_UART_Receive+0x88>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003644:	e02d      	b.n	80036a2 <HAL_UART_Receive+0xe4>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800364e:	e028      	b.n	80036a2 <HAL_UART_Receive+0xe4>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_UART_Receive+0xb6>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_UART_Receive+0xac>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	22ff      	movs	r2, #255	; 0xff
 8003664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003668:	e01b      	b.n	80036a2 <HAL_UART_Receive+0xe4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	227f      	movs	r2, #127	; 0x7f
 800366e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003672:	e016      	b.n	80036a2 <HAL_UART_Receive+0xe4>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800367c:	d10d      	bne.n	800369a <HAL_UART_Receive+0xdc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_UART_Receive+0xd2>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	227f      	movs	r2, #127	; 0x7f
 800368a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800368e:	e008      	b.n	80036a2 <HAL_UART_Receive+0xe4>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	223f      	movs	r2, #63	; 0x3f
 8003694:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003698:	e003      	b.n	80036a2 <HAL_UART_Receive+0xe4>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b2:	d108      	bne.n	80036c6 <HAL_UART_Receive+0x108>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e003      	b.n	80036ce <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80036d6:	e032      	b.n	800373e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2120      	movs	r1, #32
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fb89 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e031      	b.n	8003756 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10c      	bne.n	8003712 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	b29a      	uxth	r2, r3
 8003700:	8a7b      	ldrh	r3, [r7, #18]
 8003702:	4013      	ands	r3, r2
 8003704:	b29a      	uxth	r2, r3
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3302      	adds	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e00c      	b.n	800372c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2da      	uxtb	r2, r3
 800371a:	8a7b      	ldrh	r3, [r7, #18]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4013      	ands	r3, r2
 8003720:	b2da      	uxtb	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3301      	adds	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1c6      	bne.n	80036d8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4ba7      	ldr	r3, [pc, #668]	; (8003a28 <UART_SetConfig+0x2c8>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	430b      	orrs	r3, r1
 8003796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a95      	ldr	r2, [pc, #596]	; (8003a2c <UART_SetConfig+0x2cc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d120      	bne.n	800381e <UART_SetConfig+0xbe>
 80037dc:	4b94      	ldr	r3, [pc, #592]	; (8003a30 <UART_SetConfig+0x2d0>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d816      	bhi.n	8003818 <UART_SetConfig+0xb8>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0x90>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003801 	.word	0x08003801
 80037f4:	0800380d 	.word	0x0800380d
 80037f8:	08003807 	.word	0x08003807
 80037fc:	08003813 	.word	0x08003813
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
 8003804:	e14f      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003806:	2302      	movs	r3, #2
 8003808:	77fb      	strb	r3, [r7, #31]
 800380a:	e14c      	b.n	8003aa6 <UART_SetConfig+0x346>
 800380c:	2304      	movs	r3, #4
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e149      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003812:	2308      	movs	r3, #8
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e146      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003818:	2310      	movs	r3, #16
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e143      	b.n	8003aa6 <UART_SetConfig+0x346>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a84      	ldr	r2, [pc, #528]	; (8003a34 <UART_SetConfig+0x2d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d132      	bne.n	800388e <UART_SetConfig+0x12e>
 8003828:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <UART_SetConfig+0x2d0>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d828      	bhi.n	8003888 <UART_SetConfig+0x128>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0xdc>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	08003871 	.word	0x08003871
 8003840:	08003889 	.word	0x08003889
 8003844:	08003889 	.word	0x08003889
 8003848:	08003889 	.word	0x08003889
 800384c:	0800387d 	.word	0x0800387d
 8003850:	08003889 	.word	0x08003889
 8003854:	08003889 	.word	0x08003889
 8003858:	08003889 	.word	0x08003889
 800385c:	08003877 	.word	0x08003877
 8003860:	08003889 	.word	0x08003889
 8003864:	08003889 	.word	0x08003889
 8003868:	08003889 	.word	0x08003889
 800386c:	08003883 	.word	0x08003883
 8003870:	2300      	movs	r3, #0
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e117      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003876:	2302      	movs	r3, #2
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e114      	b.n	8003aa6 <UART_SetConfig+0x346>
 800387c:	2304      	movs	r3, #4
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e111      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003882:	2308      	movs	r3, #8
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e10e      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003888:	2310      	movs	r3, #16
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e10b      	b.n	8003aa6 <UART_SetConfig+0x346>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a69      	ldr	r2, [pc, #420]	; (8003a38 <UART_SetConfig+0x2d8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d120      	bne.n	80038da <UART_SetConfig+0x17a>
 8003898:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <UART_SetConfig+0x2d0>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038a2:	2b30      	cmp	r3, #48	; 0x30
 80038a4:	d013      	beq.n	80038ce <UART_SetConfig+0x16e>
 80038a6:	2b30      	cmp	r3, #48	; 0x30
 80038a8:	d814      	bhi.n	80038d4 <UART_SetConfig+0x174>
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d009      	beq.n	80038c2 <UART_SetConfig+0x162>
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d810      	bhi.n	80038d4 <UART_SetConfig+0x174>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <UART_SetConfig+0x15c>
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d006      	beq.n	80038c8 <UART_SetConfig+0x168>
 80038ba:	e00b      	b.n	80038d4 <UART_SetConfig+0x174>
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e0f1      	b.n	8003aa6 <UART_SetConfig+0x346>
 80038c2:	2302      	movs	r3, #2
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e0ee      	b.n	8003aa6 <UART_SetConfig+0x346>
 80038c8:	2304      	movs	r3, #4
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e0eb      	b.n	8003aa6 <UART_SetConfig+0x346>
 80038ce:	2308      	movs	r3, #8
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e0e8      	b.n	8003aa6 <UART_SetConfig+0x346>
 80038d4:	2310      	movs	r3, #16
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e0e5      	b.n	8003aa6 <UART_SetConfig+0x346>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a57      	ldr	r2, [pc, #348]	; (8003a3c <UART_SetConfig+0x2dc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d120      	bne.n	8003926 <UART_SetConfig+0x1c6>
 80038e4:	4b52      	ldr	r3, [pc, #328]	; (8003a30 <UART_SetConfig+0x2d0>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ee:	2bc0      	cmp	r3, #192	; 0xc0
 80038f0:	d013      	beq.n	800391a <UART_SetConfig+0x1ba>
 80038f2:	2bc0      	cmp	r3, #192	; 0xc0
 80038f4:	d814      	bhi.n	8003920 <UART_SetConfig+0x1c0>
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d009      	beq.n	800390e <UART_SetConfig+0x1ae>
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d810      	bhi.n	8003920 <UART_SetConfig+0x1c0>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <UART_SetConfig+0x1a8>
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d006      	beq.n	8003914 <UART_SetConfig+0x1b4>
 8003906:	e00b      	b.n	8003920 <UART_SetConfig+0x1c0>
 8003908:	2300      	movs	r3, #0
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e0cb      	b.n	8003aa6 <UART_SetConfig+0x346>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e0c8      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e0c5      	b.n	8003aa6 <UART_SetConfig+0x346>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e0c2      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0bf      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <UART_SetConfig+0x2e0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d125      	bne.n	800397c <UART_SetConfig+0x21c>
 8003930:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <UART_SetConfig+0x2d0>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800393e:	d017      	beq.n	8003970 <UART_SetConfig+0x210>
 8003940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003944:	d817      	bhi.n	8003976 <UART_SetConfig+0x216>
 8003946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394a:	d00b      	beq.n	8003964 <UART_SetConfig+0x204>
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d811      	bhi.n	8003976 <UART_SetConfig+0x216>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <UART_SetConfig+0x1fe>
 8003956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395a:	d006      	beq.n	800396a <UART_SetConfig+0x20a>
 800395c:	e00b      	b.n	8003976 <UART_SetConfig+0x216>
 800395e:	2300      	movs	r3, #0
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e0a0      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003964:	2302      	movs	r3, #2
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e09d      	b.n	8003aa6 <UART_SetConfig+0x346>
 800396a:	2304      	movs	r3, #4
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e09a      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003970:	2308      	movs	r3, #8
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e097      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003976:	2310      	movs	r3, #16
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e094      	b.n	8003aa6 <UART_SetConfig+0x346>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <UART_SetConfig+0x2e4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d125      	bne.n	80039d2 <UART_SetConfig+0x272>
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <UART_SetConfig+0x2d0>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003994:	d017      	beq.n	80039c6 <UART_SetConfig+0x266>
 8003996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800399a:	d817      	bhi.n	80039cc <UART_SetConfig+0x26c>
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	d00b      	beq.n	80039ba <UART_SetConfig+0x25a>
 80039a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a6:	d811      	bhi.n	80039cc <UART_SetConfig+0x26c>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <UART_SetConfig+0x254>
 80039ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b0:	d006      	beq.n	80039c0 <UART_SetConfig+0x260>
 80039b2:	e00b      	b.n	80039cc <UART_SetConfig+0x26c>
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e075      	b.n	8003aa6 <UART_SetConfig+0x346>
 80039ba:	2302      	movs	r3, #2
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e072      	b.n	8003aa6 <UART_SetConfig+0x346>
 80039c0:	2304      	movs	r3, #4
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e06f      	b.n	8003aa6 <UART_SetConfig+0x346>
 80039c6:	2308      	movs	r3, #8
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e06c      	b.n	8003aa6 <UART_SetConfig+0x346>
 80039cc:	2310      	movs	r3, #16
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e069      	b.n	8003aa6 <UART_SetConfig+0x346>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <UART_SetConfig+0x2e8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d137      	bne.n	8003a4c <UART_SetConfig+0x2ec>
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <UART_SetConfig+0x2d0>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039ea:	d017      	beq.n	8003a1c <UART_SetConfig+0x2bc>
 80039ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039f0:	d817      	bhi.n	8003a22 <UART_SetConfig+0x2c2>
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f6:	d00b      	beq.n	8003a10 <UART_SetConfig+0x2b0>
 80039f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fc:	d811      	bhi.n	8003a22 <UART_SetConfig+0x2c2>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <UART_SetConfig+0x2aa>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	d006      	beq.n	8003a16 <UART_SetConfig+0x2b6>
 8003a08:	e00b      	b.n	8003a22 <UART_SetConfig+0x2c2>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e04a      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a10:	2302      	movs	r3, #2
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e047      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a16:	2304      	movs	r3, #4
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e044      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e041      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a22:	2310      	movs	r3, #16
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e03e      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a28:	efff69f3 	.word	0xefff69f3
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40004400 	.word	0x40004400
 8003a38:	40004800 	.word	0x40004800
 8003a3c:	40004c00 	.word	0x40004c00
 8003a40:	40005000 	.word	0x40005000
 8003a44:	40011400 	.word	0x40011400
 8003a48:	40007800 	.word	0x40007800
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a71      	ldr	r2, [pc, #452]	; (8003c18 <UART_SetConfig+0x4b8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d125      	bne.n	8003aa2 <UART_SetConfig+0x342>
 8003a56:	4b71      	ldr	r3, [pc, #452]	; (8003c1c <UART_SetConfig+0x4bc>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a64:	d017      	beq.n	8003a96 <UART_SetConfig+0x336>
 8003a66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a6a:	d817      	bhi.n	8003a9c <UART_SetConfig+0x33c>
 8003a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a70:	d00b      	beq.n	8003a8a <UART_SetConfig+0x32a>
 8003a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a76:	d811      	bhi.n	8003a9c <UART_SetConfig+0x33c>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x324>
 8003a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a80:	d006      	beq.n	8003a90 <UART_SetConfig+0x330>
 8003a82:	e00b      	b.n	8003a9c <UART_SetConfig+0x33c>
 8003a84:	2300      	movs	r3, #0
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e00d      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e00a      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a90:	2304      	movs	r3, #4
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e007      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a96:	2308      	movs	r3, #8
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e004      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e001      	b.n	8003aa6 <UART_SetConfig+0x346>
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aae:	d15b      	bne.n	8003b68 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d827      	bhi.n	8003b06 <UART_SetConfig+0x3a6>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x35c>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003b07 	.word	0x08003b07
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7ff f83c 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8003ae4:	61b8      	str	r0, [r7, #24]
        break;
 8003ae6:	e013      	b.n	8003b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7ff f84c 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8003aec:	61b8      	str	r0, [r7, #24]
        break;
 8003aee:	e00f      	b.n	8003b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <UART_SetConfig+0x4c0>)
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e00c      	b.n	8003b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe ff6f 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003afa:	61b8      	str	r0, [r7, #24]
        break;
 8003afc:	e008      	b.n	8003b10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e004      	b.n	8003b10 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d074      	beq.n	8003c00 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	005a      	lsls	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	441a      	add	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d916      	bls.n	8003b62 <UART_SetConfig+0x402>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d212      	bcs.n	8003b62 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	89fb      	ldrh	r3, [r7, #14]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	89fa      	ldrh	r2, [r7, #14]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	e04e      	b.n	8003c00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	77bb      	strb	r3, [r7, #30]
 8003b66:	e04b      	b.n	8003c00 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b68:	7ffb      	ldrb	r3, [r7, #31]
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d827      	bhi.n	8003bbe <UART_SetConfig+0x45e>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0x414>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003ba1 	.word	0x08003ba1
 8003b7c:	08003ba9 	.word	0x08003ba9
 8003b80:	08003bbf 	.word	0x08003bbf
 8003b84:	08003baf 	.word	0x08003baf
 8003b88:	08003bbf 	.word	0x08003bbf
 8003b8c:	08003bbf 	.word	0x08003bbf
 8003b90:	08003bbf 	.word	0x08003bbf
 8003b94:	08003bb7 	.word	0x08003bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b98:	f7fe ffe0 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8003b9c:	61b8      	str	r0, [r7, #24]
        break;
 8003b9e:	e013      	b.n	8003bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ba0:	f7fe fff0 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 8003ba4:	61b8      	str	r0, [r7, #24]
        break;
 8003ba6:	e00f      	b.n	8003bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <UART_SetConfig+0x4c0>)
 8003baa:	61bb      	str	r3, [r7, #24]
        break;
 8003bac:	e00c      	b.n	8003bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bae:	f7fe ff13 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003bb2:	61b8      	str	r0, [r7, #24]
        break;
 8003bb4:	e008      	b.n	8003bc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bba:	61bb      	str	r3, [r7, #24]
        break;
 8003bbc:	e004      	b.n	8003bc8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bc6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	085a      	lsrs	r2, r3, #1
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	441a      	add	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b0f      	cmp	r3, #15
 8003be8:	d908      	bls.n	8003bfc <UART_SetConfig+0x49c>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf0:	d204      	bcs.n	8003bfc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e001      	b.n	8003c00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40007c00 	.word	0x40007c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400

08003c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01a      	beq.n	8003d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d10a      	bne.n	8003d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d78:	f7fd faf0 	bl	800135c <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d10e      	bne.n	8003daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f82d 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e023      	b.n	8003df2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d10e      	bne.n	8003dd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f817 	bl	8003dfa <UART_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00d      	b.n	8003df2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	4613      	mov	r3, r2
 8003e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0a:	e05e      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e12:	d05a      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e14:	f7fd faa2 	bl	800135c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d302      	bcc.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11b      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e043      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d02c      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7e:	d124      	bne.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00f      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d091      	beq.n	8003e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <__errno>:
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <__errno+0x8>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	2000000c 	.word	0x2000000c

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4d0d      	ldr	r5, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2600      	movs	r6, #0
 8003f0c:	42a6      	cmp	r6, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4d0b      	ldr	r5, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f000 ffec 	bl	8004ef0 <_init>
 8003f18:	1b64      	subs	r4, r4, r5
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	42a6      	cmp	r6, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f28:	4798      	blx	r3
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f32:	4798      	blx	r3
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	08005254 	.word	0x08005254
 8003f3c:	08005254 	.word	0x08005254
 8003f40:	08005254 	.word	0x08005254
 8003f44:	08005258 	.word	0x08005258

08003f48 <memset>:
 8003f48:	4402      	add	r2, r0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	f803 1b01 	strb.w	r1, [r3], #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <iprintf>:
 8003f58:	b40f      	push	{r0, r1, r2, r3}
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <iprintf+0x2c>)
 8003f5c:	b513      	push	{r0, r1, r4, lr}
 8003f5e:	681c      	ldr	r4, [r3, #0]
 8003f60:	b124      	cbz	r4, 8003f6c <iprintf+0x14>
 8003f62:	69a3      	ldr	r3, [r4, #24]
 8003f64:	b913      	cbnz	r3, 8003f6c <iprintf+0x14>
 8003f66:	4620      	mov	r0, r4
 8003f68:	f000 fa5e 	bl	8004428 <__sinit>
 8003f6c:	ab05      	add	r3, sp, #20
 8003f6e:	9a04      	ldr	r2, [sp, #16]
 8003f70:	68a1      	ldr	r1, [r4, #8]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 fc2f 	bl	80047d8 <_vfiprintf_r>
 8003f7a:	b002      	add	sp, #8
 8003f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f80:	b004      	add	sp, #16
 8003f82:	4770      	bx	lr
 8003f84:	2000000c 	.word	0x2000000c

08003f88 <_puts_r>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	460e      	mov	r6, r1
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	b118      	cbz	r0, 8003f98 <_puts_r+0x10>
 8003f90:	6983      	ldr	r3, [r0, #24]
 8003f92:	b90b      	cbnz	r3, 8003f98 <_puts_r+0x10>
 8003f94:	f000 fa48 	bl	8004428 <__sinit>
 8003f98:	69ab      	ldr	r3, [r5, #24]
 8003f9a:	68ac      	ldr	r4, [r5, #8]
 8003f9c:	b913      	cbnz	r3, 8003fa4 <_puts_r+0x1c>
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fa42 	bl	8004428 <__sinit>
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <_puts_r+0xd0>)
 8003fa6:	429c      	cmp	r4, r3
 8003fa8:	d120      	bne.n	8003fec <_puts_r+0x64>
 8003faa:	686c      	ldr	r4, [r5, #4]
 8003fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fae:	07db      	lsls	r3, r3, #31
 8003fb0:	d405      	bmi.n	8003fbe <_puts_r+0x36>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	0598      	lsls	r0, r3, #22
 8003fb6:	d402      	bmi.n	8003fbe <_puts_r+0x36>
 8003fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fba:	f000 fad3 	bl	8004564 <__retarget_lock_acquire_recursive>
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	0719      	lsls	r1, r3, #28
 8003fc2:	d51d      	bpl.n	8004000 <_puts_r+0x78>
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	b1db      	cbz	r3, 8004000 <_puts_r+0x78>
 8003fc8:	3e01      	subs	r6, #1
 8003fca:	68a3      	ldr	r3, [r4, #8]
 8003fcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	60a3      	str	r3, [r4, #8]
 8003fd4:	bb39      	cbnz	r1, 8004026 <_puts_r+0x9e>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da38      	bge.n	800404c <_puts_r+0xc4>
 8003fda:	4622      	mov	r2, r4
 8003fdc:	210a      	movs	r1, #10
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 f848 	bl	8004074 <__swbuf_r>
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d011      	beq.n	800400c <_puts_r+0x84>
 8003fe8:	250a      	movs	r5, #10
 8003fea:	e011      	b.n	8004010 <_puts_r+0x88>
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <_puts_r+0xd4>)
 8003fee:	429c      	cmp	r4, r3
 8003ff0:	d101      	bne.n	8003ff6 <_puts_r+0x6e>
 8003ff2:	68ac      	ldr	r4, [r5, #8]
 8003ff4:	e7da      	b.n	8003fac <_puts_r+0x24>
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <_puts_r+0xd8>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	bf08      	it	eq
 8003ffc:	68ec      	ldreq	r4, [r5, #12]
 8003ffe:	e7d5      	b.n	8003fac <_puts_r+0x24>
 8004000:	4621      	mov	r1, r4
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f888 	bl	8004118 <__swsetup_r>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0dd      	beq.n	8003fc8 <_puts_r+0x40>
 800400c:	f04f 35ff 	mov.w	r5, #4294967295
 8004010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004012:	07da      	lsls	r2, r3, #31
 8004014:	d405      	bmi.n	8004022 <_puts_r+0x9a>
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	059b      	lsls	r3, r3, #22
 800401a:	d402      	bmi.n	8004022 <_puts_r+0x9a>
 800401c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800401e:	f000 faa2 	bl	8004566 <__retarget_lock_release_recursive>
 8004022:	4628      	mov	r0, r5
 8004024:	bd70      	pop	{r4, r5, r6, pc}
 8004026:	2b00      	cmp	r3, #0
 8004028:	da04      	bge.n	8004034 <_puts_r+0xac>
 800402a:	69a2      	ldr	r2, [r4, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	dc06      	bgt.n	800403e <_puts_r+0xb6>
 8004030:	290a      	cmp	r1, #10
 8004032:	d004      	beq.n	800403e <_puts_r+0xb6>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	7019      	strb	r1, [r3, #0]
 800403c:	e7c5      	b.n	8003fca <_puts_r+0x42>
 800403e:	4622      	mov	r2, r4
 8004040:	4628      	mov	r0, r5
 8004042:	f000 f817 	bl	8004074 <__swbuf_r>
 8004046:	3001      	adds	r0, #1
 8004048:	d1bf      	bne.n	8003fca <_puts_r+0x42>
 800404a:	e7df      	b.n	800400c <_puts_r+0x84>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	250a      	movs	r5, #10
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	6022      	str	r2, [r4, #0]
 8004054:	701d      	strb	r5, [r3, #0]
 8004056:	e7db      	b.n	8004010 <_puts_r+0x88>
 8004058:	080051d8 	.word	0x080051d8
 800405c:	080051f8 	.word	0x080051f8
 8004060:	080051b8 	.word	0x080051b8

08004064 <puts>:
 8004064:	4b02      	ldr	r3, [pc, #8]	; (8004070 <puts+0xc>)
 8004066:	4601      	mov	r1, r0
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	f7ff bf8d 	b.w	8003f88 <_puts_r>
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c

08004074 <__swbuf_r>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	460e      	mov	r6, r1
 8004078:	4614      	mov	r4, r2
 800407a:	4605      	mov	r5, r0
 800407c:	b118      	cbz	r0, 8004086 <__swbuf_r+0x12>
 800407e:	6983      	ldr	r3, [r0, #24]
 8004080:	b90b      	cbnz	r3, 8004086 <__swbuf_r+0x12>
 8004082:	f000 f9d1 	bl	8004428 <__sinit>
 8004086:	4b21      	ldr	r3, [pc, #132]	; (800410c <__swbuf_r+0x98>)
 8004088:	429c      	cmp	r4, r3
 800408a:	d12b      	bne.n	80040e4 <__swbuf_r+0x70>
 800408c:	686c      	ldr	r4, [r5, #4]
 800408e:	69a3      	ldr	r3, [r4, #24]
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	071a      	lsls	r2, r3, #28
 8004096:	d52f      	bpl.n	80040f8 <__swbuf_r+0x84>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	b36b      	cbz	r3, 80040f8 <__swbuf_r+0x84>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1ac0      	subs	r0, r0, r3
 80040a2:	6963      	ldr	r3, [r4, #20]
 80040a4:	b2f6      	uxtb	r6, r6
 80040a6:	4283      	cmp	r3, r0
 80040a8:	4637      	mov	r7, r6
 80040aa:	dc04      	bgt.n	80040b6 <__swbuf_r+0x42>
 80040ac:	4621      	mov	r1, r4
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 f926 	bl	8004300 <_fflush_r>
 80040b4:	bb30      	cbnz	r0, 8004104 <__swbuf_r+0x90>
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	60a3      	str	r3, [r4, #8]
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	6022      	str	r2, [r4, #0]
 80040c2:	701e      	strb	r6, [r3, #0]
 80040c4:	6963      	ldr	r3, [r4, #20]
 80040c6:	3001      	adds	r0, #1
 80040c8:	4283      	cmp	r3, r0
 80040ca:	d004      	beq.n	80040d6 <__swbuf_r+0x62>
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	07db      	lsls	r3, r3, #31
 80040d0:	d506      	bpl.n	80040e0 <__swbuf_r+0x6c>
 80040d2:	2e0a      	cmp	r6, #10
 80040d4:	d104      	bne.n	80040e0 <__swbuf_r+0x6c>
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 f911 	bl	8004300 <_fflush_r>
 80040de:	b988      	cbnz	r0, 8004104 <__swbuf_r+0x90>
 80040e0:	4638      	mov	r0, r7
 80040e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <__swbuf_r+0x9c>)
 80040e6:	429c      	cmp	r4, r3
 80040e8:	d101      	bne.n	80040ee <__swbuf_r+0x7a>
 80040ea:	68ac      	ldr	r4, [r5, #8]
 80040ec:	e7cf      	b.n	800408e <__swbuf_r+0x1a>
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <__swbuf_r+0xa0>)
 80040f0:	429c      	cmp	r4, r3
 80040f2:	bf08      	it	eq
 80040f4:	68ec      	ldreq	r4, [r5, #12]
 80040f6:	e7ca      	b.n	800408e <__swbuf_r+0x1a>
 80040f8:	4621      	mov	r1, r4
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f80c 	bl	8004118 <__swsetup_r>
 8004100:	2800      	cmp	r0, #0
 8004102:	d0cb      	beq.n	800409c <__swbuf_r+0x28>
 8004104:	f04f 37ff 	mov.w	r7, #4294967295
 8004108:	e7ea      	b.n	80040e0 <__swbuf_r+0x6c>
 800410a:	bf00      	nop
 800410c:	080051d8 	.word	0x080051d8
 8004110:	080051f8 	.word	0x080051f8
 8004114:	080051b8 	.word	0x080051b8

08004118 <__swsetup_r>:
 8004118:	4b32      	ldr	r3, [pc, #200]	; (80041e4 <__swsetup_r+0xcc>)
 800411a:	b570      	push	{r4, r5, r6, lr}
 800411c:	681d      	ldr	r5, [r3, #0]
 800411e:	4606      	mov	r6, r0
 8004120:	460c      	mov	r4, r1
 8004122:	b125      	cbz	r5, 800412e <__swsetup_r+0x16>
 8004124:	69ab      	ldr	r3, [r5, #24]
 8004126:	b913      	cbnz	r3, 800412e <__swsetup_r+0x16>
 8004128:	4628      	mov	r0, r5
 800412a:	f000 f97d 	bl	8004428 <__sinit>
 800412e:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <__swsetup_r+0xd0>)
 8004130:	429c      	cmp	r4, r3
 8004132:	d10f      	bne.n	8004154 <__swsetup_r+0x3c>
 8004134:	686c      	ldr	r4, [r5, #4]
 8004136:	89a3      	ldrh	r3, [r4, #12]
 8004138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800413c:	0719      	lsls	r1, r3, #28
 800413e:	d42c      	bmi.n	800419a <__swsetup_r+0x82>
 8004140:	06dd      	lsls	r5, r3, #27
 8004142:	d411      	bmi.n	8004168 <__swsetup_r+0x50>
 8004144:	2309      	movs	r3, #9
 8004146:	6033      	str	r3, [r6, #0]
 8004148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800414c:	81a3      	strh	r3, [r4, #12]
 800414e:	f04f 30ff 	mov.w	r0, #4294967295
 8004152:	e03e      	b.n	80041d2 <__swsetup_r+0xba>
 8004154:	4b25      	ldr	r3, [pc, #148]	; (80041ec <__swsetup_r+0xd4>)
 8004156:	429c      	cmp	r4, r3
 8004158:	d101      	bne.n	800415e <__swsetup_r+0x46>
 800415a:	68ac      	ldr	r4, [r5, #8]
 800415c:	e7eb      	b.n	8004136 <__swsetup_r+0x1e>
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <__swsetup_r+0xd8>)
 8004160:	429c      	cmp	r4, r3
 8004162:	bf08      	it	eq
 8004164:	68ec      	ldreq	r4, [r5, #12]
 8004166:	e7e6      	b.n	8004136 <__swsetup_r+0x1e>
 8004168:	0758      	lsls	r0, r3, #29
 800416a:	d512      	bpl.n	8004192 <__swsetup_r+0x7a>
 800416c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800416e:	b141      	cbz	r1, 8004182 <__swsetup_r+0x6a>
 8004170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004174:	4299      	cmp	r1, r3
 8004176:	d002      	beq.n	800417e <__swsetup_r+0x66>
 8004178:	4630      	mov	r0, r6
 800417a:	f000 fa59 	bl	8004630 <_free_r>
 800417e:	2300      	movs	r3, #0
 8004180:	6363      	str	r3, [r4, #52]	; 0x34
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	2300      	movs	r3, #0
 800418c:	6063      	str	r3, [r4, #4]
 800418e:	6923      	ldr	r3, [r4, #16]
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	b94b      	cbnz	r3, 80041b2 <__swsetup_r+0x9a>
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a8:	d003      	beq.n	80041b2 <__swsetup_r+0x9a>
 80041aa:	4621      	mov	r1, r4
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f9ff 	bl	80045b0 <__smakebuf_r>
 80041b2:	89a0      	ldrh	r0, [r4, #12]
 80041b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041b8:	f010 0301 	ands.w	r3, r0, #1
 80041bc:	d00a      	beq.n	80041d4 <__swsetup_r+0xbc>
 80041be:	2300      	movs	r3, #0
 80041c0:	60a3      	str	r3, [r4, #8]
 80041c2:	6963      	ldr	r3, [r4, #20]
 80041c4:	425b      	negs	r3, r3
 80041c6:	61a3      	str	r3, [r4, #24]
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	b943      	cbnz	r3, 80041de <__swsetup_r+0xc6>
 80041cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041d0:	d1ba      	bne.n	8004148 <__swsetup_r+0x30>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	0781      	lsls	r1, r0, #30
 80041d6:	bf58      	it	pl
 80041d8:	6963      	ldrpl	r3, [r4, #20]
 80041da:	60a3      	str	r3, [r4, #8]
 80041dc:	e7f4      	b.n	80041c8 <__swsetup_r+0xb0>
 80041de:	2000      	movs	r0, #0
 80041e0:	e7f7      	b.n	80041d2 <__swsetup_r+0xba>
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c
 80041e8:	080051d8 	.word	0x080051d8
 80041ec:	080051f8 	.word	0x080051f8
 80041f0:	080051b8 	.word	0x080051b8

080041f4 <__sflush_r>:
 80041f4:	898a      	ldrh	r2, [r1, #12]
 80041f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fa:	4605      	mov	r5, r0
 80041fc:	0710      	lsls	r0, r2, #28
 80041fe:	460c      	mov	r4, r1
 8004200:	d458      	bmi.n	80042b4 <__sflush_r+0xc0>
 8004202:	684b      	ldr	r3, [r1, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	dc05      	bgt.n	8004214 <__sflush_r+0x20>
 8004208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	dc02      	bgt.n	8004214 <__sflush_r+0x20>
 800420e:	2000      	movs	r0, #0
 8004210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004216:	2e00      	cmp	r6, #0
 8004218:	d0f9      	beq.n	800420e <__sflush_r+0x1a>
 800421a:	2300      	movs	r3, #0
 800421c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004220:	682f      	ldr	r7, [r5, #0]
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	d032      	beq.n	800428c <__sflush_r+0x98>
 8004226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	075a      	lsls	r2, r3, #29
 800422c:	d505      	bpl.n	800423a <__sflush_r+0x46>
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	1ac0      	subs	r0, r0, r3
 8004232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004234:	b10b      	cbz	r3, 800423a <__sflush_r+0x46>
 8004236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004238:	1ac0      	subs	r0, r0, r3
 800423a:	2300      	movs	r3, #0
 800423c:	4602      	mov	r2, r0
 800423e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004240:	6a21      	ldr	r1, [r4, #32]
 8004242:	4628      	mov	r0, r5
 8004244:	47b0      	blx	r6
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	d106      	bne.n	800425a <__sflush_r+0x66>
 800424c:	6829      	ldr	r1, [r5, #0]
 800424e:	291d      	cmp	r1, #29
 8004250:	d82c      	bhi.n	80042ac <__sflush_r+0xb8>
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <__sflush_r+0x108>)
 8004254:	40ca      	lsrs	r2, r1
 8004256:	07d6      	lsls	r6, r2, #31
 8004258:	d528      	bpl.n	80042ac <__sflush_r+0xb8>
 800425a:	2200      	movs	r2, #0
 800425c:	6062      	str	r2, [r4, #4]
 800425e:	04d9      	lsls	r1, r3, #19
 8004260:	6922      	ldr	r2, [r4, #16]
 8004262:	6022      	str	r2, [r4, #0]
 8004264:	d504      	bpl.n	8004270 <__sflush_r+0x7c>
 8004266:	1c42      	adds	r2, r0, #1
 8004268:	d101      	bne.n	800426e <__sflush_r+0x7a>
 800426a:	682b      	ldr	r3, [r5, #0]
 800426c:	b903      	cbnz	r3, 8004270 <__sflush_r+0x7c>
 800426e:	6560      	str	r0, [r4, #84]	; 0x54
 8004270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004272:	602f      	str	r7, [r5, #0]
 8004274:	2900      	cmp	r1, #0
 8004276:	d0ca      	beq.n	800420e <__sflush_r+0x1a>
 8004278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800427c:	4299      	cmp	r1, r3
 800427e:	d002      	beq.n	8004286 <__sflush_r+0x92>
 8004280:	4628      	mov	r0, r5
 8004282:	f000 f9d5 	bl	8004630 <_free_r>
 8004286:	2000      	movs	r0, #0
 8004288:	6360      	str	r0, [r4, #52]	; 0x34
 800428a:	e7c1      	b.n	8004210 <__sflush_r+0x1c>
 800428c:	6a21      	ldr	r1, [r4, #32]
 800428e:	2301      	movs	r3, #1
 8004290:	4628      	mov	r0, r5
 8004292:	47b0      	blx	r6
 8004294:	1c41      	adds	r1, r0, #1
 8004296:	d1c7      	bne.n	8004228 <__sflush_r+0x34>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0c4      	beq.n	8004228 <__sflush_r+0x34>
 800429e:	2b1d      	cmp	r3, #29
 80042a0:	d001      	beq.n	80042a6 <__sflush_r+0xb2>
 80042a2:	2b16      	cmp	r3, #22
 80042a4:	d101      	bne.n	80042aa <__sflush_r+0xb6>
 80042a6:	602f      	str	r7, [r5, #0]
 80042a8:	e7b1      	b.n	800420e <__sflush_r+0x1a>
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	e7ad      	b.n	8004210 <__sflush_r+0x1c>
 80042b4:	690f      	ldr	r7, [r1, #16]
 80042b6:	2f00      	cmp	r7, #0
 80042b8:	d0a9      	beq.n	800420e <__sflush_r+0x1a>
 80042ba:	0793      	lsls	r3, r2, #30
 80042bc:	680e      	ldr	r6, [r1, #0]
 80042be:	bf08      	it	eq
 80042c0:	694b      	ldreq	r3, [r1, #20]
 80042c2:	600f      	str	r7, [r1, #0]
 80042c4:	bf18      	it	ne
 80042c6:	2300      	movne	r3, #0
 80042c8:	eba6 0807 	sub.w	r8, r6, r7
 80042cc:	608b      	str	r3, [r1, #8]
 80042ce:	f1b8 0f00 	cmp.w	r8, #0
 80042d2:	dd9c      	ble.n	800420e <__sflush_r+0x1a>
 80042d4:	6a21      	ldr	r1, [r4, #32]
 80042d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042d8:	4643      	mov	r3, r8
 80042da:	463a      	mov	r2, r7
 80042dc:	4628      	mov	r0, r5
 80042de:	47b0      	blx	r6
 80042e0:	2800      	cmp	r0, #0
 80042e2:	dc06      	bgt.n	80042f2 <__sflush_r+0xfe>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	e78e      	b.n	8004210 <__sflush_r+0x1c>
 80042f2:	4407      	add	r7, r0
 80042f4:	eba8 0800 	sub.w	r8, r8, r0
 80042f8:	e7e9      	b.n	80042ce <__sflush_r+0xda>
 80042fa:	bf00      	nop
 80042fc:	20400001 	.word	0x20400001

08004300 <_fflush_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	4605      	mov	r5, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b913      	cbnz	r3, 8004310 <_fflush_r+0x10>
 800430a:	2500      	movs	r5, #0
 800430c:	4628      	mov	r0, r5
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	b118      	cbz	r0, 800431a <_fflush_r+0x1a>
 8004312:	6983      	ldr	r3, [r0, #24]
 8004314:	b90b      	cbnz	r3, 800431a <_fflush_r+0x1a>
 8004316:	f000 f887 	bl	8004428 <__sinit>
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <_fflush_r+0x6c>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d11b      	bne.n	8004358 <_fflush_r+0x58>
 8004320:	686c      	ldr	r4, [r5, #4]
 8004322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ef      	beq.n	800430a <_fflush_r+0xa>
 800432a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800432c:	07d0      	lsls	r0, r2, #31
 800432e:	d404      	bmi.n	800433a <_fflush_r+0x3a>
 8004330:	0599      	lsls	r1, r3, #22
 8004332:	d402      	bmi.n	800433a <_fflush_r+0x3a>
 8004334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004336:	f000 f915 	bl	8004564 <__retarget_lock_acquire_recursive>
 800433a:	4628      	mov	r0, r5
 800433c:	4621      	mov	r1, r4
 800433e:	f7ff ff59 	bl	80041f4 <__sflush_r>
 8004342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004344:	07da      	lsls	r2, r3, #31
 8004346:	4605      	mov	r5, r0
 8004348:	d4e0      	bmi.n	800430c <_fflush_r+0xc>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	059b      	lsls	r3, r3, #22
 800434e:	d4dd      	bmi.n	800430c <_fflush_r+0xc>
 8004350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004352:	f000 f908 	bl	8004566 <__retarget_lock_release_recursive>
 8004356:	e7d9      	b.n	800430c <_fflush_r+0xc>
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <_fflush_r+0x70>)
 800435a:	429c      	cmp	r4, r3
 800435c:	d101      	bne.n	8004362 <_fflush_r+0x62>
 800435e:	68ac      	ldr	r4, [r5, #8]
 8004360:	e7df      	b.n	8004322 <_fflush_r+0x22>
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <_fflush_r+0x74>)
 8004364:	429c      	cmp	r4, r3
 8004366:	bf08      	it	eq
 8004368:	68ec      	ldreq	r4, [r5, #12]
 800436a:	e7da      	b.n	8004322 <_fflush_r+0x22>
 800436c:	080051d8 	.word	0x080051d8
 8004370:	080051f8 	.word	0x080051f8
 8004374:	080051b8 	.word	0x080051b8

08004378 <std>:
 8004378:	2300      	movs	r3, #0
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	e9c0 3300 	strd	r3, r3, [r0]
 8004382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004386:	6083      	str	r3, [r0, #8]
 8004388:	8181      	strh	r1, [r0, #12]
 800438a:	6643      	str	r3, [r0, #100]	; 0x64
 800438c:	81c2      	strh	r2, [r0, #14]
 800438e:	6183      	str	r3, [r0, #24]
 8004390:	4619      	mov	r1, r3
 8004392:	2208      	movs	r2, #8
 8004394:	305c      	adds	r0, #92	; 0x5c
 8004396:	f7ff fdd7 	bl	8003f48 <memset>
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <std+0x38>)
 800439c:	6263      	str	r3, [r4, #36]	; 0x24
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <std+0x3c>)
 80043a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <std+0x40>)
 80043a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <std+0x44>)
 80043a8:	6224      	str	r4, [r4, #32]
 80043aa:	6323      	str	r3, [r4, #48]	; 0x30
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	bf00      	nop
 80043b0:	08004d81 	.word	0x08004d81
 80043b4:	08004da3 	.word	0x08004da3
 80043b8:	08004ddb 	.word	0x08004ddb
 80043bc:	08004dff 	.word	0x08004dff

080043c0 <_cleanup_r>:
 80043c0:	4901      	ldr	r1, [pc, #4]	; (80043c8 <_cleanup_r+0x8>)
 80043c2:	f000 b8af 	b.w	8004524 <_fwalk_reent>
 80043c6:	bf00      	nop
 80043c8:	08004301 	.word	0x08004301

080043cc <__sfmoreglue>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	1e4a      	subs	r2, r1, #1
 80043d0:	2568      	movs	r5, #104	; 0x68
 80043d2:	4355      	muls	r5, r2
 80043d4:	460e      	mov	r6, r1
 80043d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043da:	f000 f979 	bl	80046d0 <_malloc_r>
 80043de:	4604      	mov	r4, r0
 80043e0:	b140      	cbz	r0, 80043f4 <__sfmoreglue+0x28>
 80043e2:	2100      	movs	r1, #0
 80043e4:	e9c0 1600 	strd	r1, r6, [r0]
 80043e8:	300c      	adds	r0, #12
 80043ea:	60a0      	str	r0, [r4, #8]
 80043ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043f0:	f7ff fdaa 	bl	8003f48 <memset>
 80043f4:	4620      	mov	r0, r4
 80043f6:	bd70      	pop	{r4, r5, r6, pc}

080043f8 <__sfp_lock_acquire>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__sfp_lock_acquire+0x8>)
 80043fa:	f000 b8b3 	b.w	8004564 <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	20000604 	.word	0x20000604

08004404 <__sfp_lock_release>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__sfp_lock_release+0x8>)
 8004406:	f000 b8ae 	b.w	8004566 <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	20000604 	.word	0x20000604

08004410 <__sinit_lock_acquire>:
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <__sinit_lock_acquire+0x8>)
 8004412:	f000 b8a7 	b.w	8004564 <__retarget_lock_acquire_recursive>
 8004416:	bf00      	nop
 8004418:	200005ff 	.word	0x200005ff

0800441c <__sinit_lock_release>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sinit_lock_release+0x8>)
 800441e:	f000 b8a2 	b.w	8004566 <__retarget_lock_release_recursive>
 8004422:	bf00      	nop
 8004424:	200005ff 	.word	0x200005ff

08004428 <__sinit>:
 8004428:	b510      	push	{r4, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	f7ff fff0 	bl	8004410 <__sinit_lock_acquire>
 8004430:	69a3      	ldr	r3, [r4, #24]
 8004432:	b11b      	cbz	r3, 800443c <__sinit+0x14>
 8004434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004438:	f7ff bff0 	b.w	800441c <__sinit_lock_release>
 800443c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004440:	6523      	str	r3, [r4, #80]	; 0x50
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <__sinit+0x68>)
 8004444:	4a13      	ldr	r2, [pc, #76]	; (8004494 <__sinit+0x6c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	62a2      	str	r2, [r4, #40]	; 0x28
 800444a:	42a3      	cmp	r3, r4
 800444c:	bf04      	itt	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	61a3      	streq	r3, [r4, #24]
 8004452:	4620      	mov	r0, r4
 8004454:	f000 f820 	bl	8004498 <__sfp>
 8004458:	6060      	str	r0, [r4, #4]
 800445a:	4620      	mov	r0, r4
 800445c:	f000 f81c 	bl	8004498 <__sfp>
 8004460:	60a0      	str	r0, [r4, #8]
 8004462:	4620      	mov	r0, r4
 8004464:	f000 f818 	bl	8004498 <__sfp>
 8004468:	2200      	movs	r2, #0
 800446a:	60e0      	str	r0, [r4, #12]
 800446c:	2104      	movs	r1, #4
 800446e:	6860      	ldr	r0, [r4, #4]
 8004470:	f7ff ff82 	bl	8004378 <std>
 8004474:	68a0      	ldr	r0, [r4, #8]
 8004476:	2201      	movs	r2, #1
 8004478:	2109      	movs	r1, #9
 800447a:	f7ff ff7d 	bl	8004378 <std>
 800447e:	68e0      	ldr	r0, [r4, #12]
 8004480:	2202      	movs	r2, #2
 8004482:	2112      	movs	r1, #18
 8004484:	f7ff ff78 	bl	8004378 <std>
 8004488:	2301      	movs	r3, #1
 800448a:	61a3      	str	r3, [r4, #24]
 800448c:	e7d2      	b.n	8004434 <__sinit+0xc>
 800448e:	bf00      	nop
 8004490:	080051b4 	.word	0x080051b4
 8004494:	080043c1 	.word	0x080043c1

08004498 <__sfp>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	4607      	mov	r7, r0
 800449c:	f7ff ffac 	bl	80043f8 <__sfp_lock_acquire>
 80044a0:	4b1e      	ldr	r3, [pc, #120]	; (800451c <__sfp+0x84>)
 80044a2:	681e      	ldr	r6, [r3, #0]
 80044a4:	69b3      	ldr	r3, [r6, #24]
 80044a6:	b913      	cbnz	r3, 80044ae <__sfp+0x16>
 80044a8:	4630      	mov	r0, r6
 80044aa:	f7ff ffbd 	bl	8004428 <__sinit>
 80044ae:	3648      	adds	r6, #72	; 0x48
 80044b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	d503      	bpl.n	80044c0 <__sfp+0x28>
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	b30b      	cbz	r3, 8004500 <__sfp+0x68>
 80044bc:	6836      	ldr	r6, [r6, #0]
 80044be:	e7f7      	b.n	80044b0 <__sfp+0x18>
 80044c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044c4:	b9d5      	cbnz	r5, 80044fc <__sfp+0x64>
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <__sfp+0x88>)
 80044c8:	60e3      	str	r3, [r4, #12]
 80044ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044ce:	6665      	str	r5, [r4, #100]	; 0x64
 80044d0:	f000 f847 	bl	8004562 <__retarget_lock_init_recursive>
 80044d4:	f7ff ff96 	bl	8004404 <__sfp_lock_release>
 80044d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044e0:	6025      	str	r5, [r4, #0]
 80044e2:	61a5      	str	r5, [r4, #24]
 80044e4:	2208      	movs	r2, #8
 80044e6:	4629      	mov	r1, r5
 80044e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ec:	f7ff fd2c 	bl	8003f48 <memset>
 80044f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f8:	4620      	mov	r0, r4
 80044fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044fc:	3468      	adds	r4, #104	; 0x68
 80044fe:	e7d9      	b.n	80044b4 <__sfp+0x1c>
 8004500:	2104      	movs	r1, #4
 8004502:	4638      	mov	r0, r7
 8004504:	f7ff ff62 	bl	80043cc <__sfmoreglue>
 8004508:	4604      	mov	r4, r0
 800450a:	6030      	str	r0, [r6, #0]
 800450c:	2800      	cmp	r0, #0
 800450e:	d1d5      	bne.n	80044bc <__sfp+0x24>
 8004510:	f7ff ff78 	bl	8004404 <__sfp_lock_release>
 8004514:	230c      	movs	r3, #12
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	e7ee      	b.n	80044f8 <__sfp+0x60>
 800451a:	bf00      	nop
 800451c:	080051b4 	.word	0x080051b4
 8004520:	ffff0001 	.word	0xffff0001

08004524 <_fwalk_reent>:
 8004524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004528:	4606      	mov	r6, r0
 800452a:	4688      	mov	r8, r1
 800452c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004530:	2700      	movs	r7, #0
 8004532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004536:	f1b9 0901 	subs.w	r9, r9, #1
 800453a:	d505      	bpl.n	8004548 <_fwalk_reent+0x24>
 800453c:	6824      	ldr	r4, [r4, #0]
 800453e:	2c00      	cmp	r4, #0
 8004540:	d1f7      	bne.n	8004532 <_fwalk_reent+0xe>
 8004542:	4638      	mov	r0, r7
 8004544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004548:	89ab      	ldrh	r3, [r5, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d907      	bls.n	800455e <_fwalk_reent+0x3a>
 800454e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004552:	3301      	adds	r3, #1
 8004554:	d003      	beq.n	800455e <_fwalk_reent+0x3a>
 8004556:	4629      	mov	r1, r5
 8004558:	4630      	mov	r0, r6
 800455a:	47c0      	blx	r8
 800455c:	4307      	orrs	r7, r0
 800455e:	3568      	adds	r5, #104	; 0x68
 8004560:	e7e9      	b.n	8004536 <_fwalk_reent+0x12>

08004562 <__retarget_lock_init_recursive>:
 8004562:	4770      	bx	lr

08004564 <__retarget_lock_acquire_recursive>:
 8004564:	4770      	bx	lr

08004566 <__retarget_lock_release_recursive>:
 8004566:	4770      	bx	lr

08004568 <__swhatbuf_r>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	2900      	cmp	r1, #0
 8004572:	b096      	sub	sp, #88	; 0x58
 8004574:	4614      	mov	r4, r2
 8004576:	461d      	mov	r5, r3
 8004578:	da07      	bge.n	800458a <__swhatbuf_r+0x22>
 800457a:	2300      	movs	r3, #0
 800457c:	602b      	str	r3, [r5, #0]
 800457e:	89b3      	ldrh	r3, [r6, #12]
 8004580:	061a      	lsls	r2, r3, #24
 8004582:	d410      	bmi.n	80045a6 <__swhatbuf_r+0x3e>
 8004584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004588:	e00e      	b.n	80045a8 <__swhatbuf_r+0x40>
 800458a:	466a      	mov	r2, sp
 800458c:	f000 fc5e 	bl	8004e4c <_fstat_r>
 8004590:	2800      	cmp	r0, #0
 8004592:	dbf2      	blt.n	800457a <__swhatbuf_r+0x12>
 8004594:	9a01      	ldr	r2, [sp, #4]
 8004596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800459a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800459e:	425a      	negs	r2, r3
 80045a0:	415a      	adcs	r2, r3
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	e7ee      	b.n	8004584 <__swhatbuf_r+0x1c>
 80045a6:	2340      	movs	r3, #64	; 0x40
 80045a8:	2000      	movs	r0, #0
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	b016      	add	sp, #88	; 0x58
 80045ae:	bd70      	pop	{r4, r5, r6, pc}

080045b0 <__smakebuf_r>:
 80045b0:	898b      	ldrh	r3, [r1, #12]
 80045b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045b4:	079d      	lsls	r5, r3, #30
 80045b6:	4606      	mov	r6, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	d507      	bpl.n	80045cc <__smakebuf_r+0x1c>
 80045bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	2301      	movs	r3, #1
 80045c6:	6163      	str	r3, [r4, #20]
 80045c8:	b002      	add	sp, #8
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	ab01      	add	r3, sp, #4
 80045ce:	466a      	mov	r2, sp
 80045d0:	f7ff ffca 	bl	8004568 <__swhatbuf_r>
 80045d4:	9900      	ldr	r1, [sp, #0]
 80045d6:	4605      	mov	r5, r0
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 f879 	bl	80046d0 <_malloc_r>
 80045de:	b948      	cbnz	r0, 80045f4 <__smakebuf_r+0x44>
 80045e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e4:	059a      	lsls	r2, r3, #22
 80045e6:	d4ef      	bmi.n	80045c8 <__smakebuf_r+0x18>
 80045e8:	f023 0303 	bic.w	r3, r3, #3
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	81a3      	strh	r3, [r4, #12]
 80045f2:	e7e3      	b.n	80045bc <__smakebuf_r+0xc>
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <__smakebuf_r+0x7c>)
 80045f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	6020      	str	r0, [r4, #0]
 80045fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	9b00      	ldr	r3, [sp, #0]
 8004604:	6163      	str	r3, [r4, #20]
 8004606:	9b01      	ldr	r3, [sp, #4]
 8004608:	6120      	str	r0, [r4, #16]
 800460a:	b15b      	cbz	r3, 8004624 <__smakebuf_r+0x74>
 800460c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004610:	4630      	mov	r0, r6
 8004612:	f000 fc2d 	bl	8004e70 <_isatty_r>
 8004616:	b128      	cbz	r0, 8004624 <__smakebuf_r+0x74>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	89a0      	ldrh	r0, [r4, #12]
 8004626:	4305      	orrs	r5, r0
 8004628:	81a5      	strh	r5, [r4, #12]
 800462a:	e7cd      	b.n	80045c8 <__smakebuf_r+0x18>
 800462c:	080043c1 	.word	0x080043c1

08004630 <_free_r>:
 8004630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004632:	2900      	cmp	r1, #0
 8004634:	d048      	beq.n	80046c8 <_free_r+0x98>
 8004636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463a:	9001      	str	r0, [sp, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f1a1 0404 	sub.w	r4, r1, #4
 8004642:	bfb8      	it	lt
 8004644:	18e4      	addlt	r4, r4, r3
 8004646:	f000 fc35 	bl	8004eb4 <__malloc_lock>
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <_free_r+0x9c>)
 800464c:	9801      	ldr	r0, [sp, #4]
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	4615      	mov	r5, r2
 8004652:	b933      	cbnz	r3, 8004662 <_free_r+0x32>
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6014      	str	r4, [r2, #0]
 8004658:	b003      	add	sp, #12
 800465a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800465e:	f000 bc2f 	b.w	8004ec0 <__malloc_unlock>
 8004662:	42a3      	cmp	r3, r4
 8004664:	d90b      	bls.n	800467e <_free_r+0x4e>
 8004666:	6821      	ldr	r1, [r4, #0]
 8004668:	1862      	adds	r2, r4, r1
 800466a:	4293      	cmp	r3, r2
 800466c:	bf04      	itt	eq
 800466e:	681a      	ldreq	r2, [r3, #0]
 8004670:	685b      	ldreq	r3, [r3, #4]
 8004672:	6063      	str	r3, [r4, #4]
 8004674:	bf04      	itt	eq
 8004676:	1852      	addeq	r2, r2, r1
 8004678:	6022      	streq	r2, [r4, #0]
 800467a:	602c      	str	r4, [r5, #0]
 800467c:	e7ec      	b.n	8004658 <_free_r+0x28>
 800467e:	461a      	mov	r2, r3
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	b10b      	cbz	r3, 8004688 <_free_r+0x58>
 8004684:	42a3      	cmp	r3, r4
 8004686:	d9fa      	bls.n	800467e <_free_r+0x4e>
 8004688:	6811      	ldr	r1, [r2, #0]
 800468a:	1855      	adds	r5, r2, r1
 800468c:	42a5      	cmp	r5, r4
 800468e:	d10b      	bne.n	80046a8 <_free_r+0x78>
 8004690:	6824      	ldr	r4, [r4, #0]
 8004692:	4421      	add	r1, r4
 8004694:	1854      	adds	r4, r2, r1
 8004696:	42a3      	cmp	r3, r4
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	d1dd      	bne.n	8004658 <_free_r+0x28>
 800469c:	681c      	ldr	r4, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	6053      	str	r3, [r2, #4]
 80046a2:	4421      	add	r1, r4
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	e7d7      	b.n	8004658 <_free_r+0x28>
 80046a8:	d902      	bls.n	80046b0 <_free_r+0x80>
 80046aa:	230c      	movs	r3, #12
 80046ac:	6003      	str	r3, [r0, #0]
 80046ae:	e7d3      	b.n	8004658 <_free_r+0x28>
 80046b0:	6825      	ldr	r5, [r4, #0]
 80046b2:	1961      	adds	r1, r4, r5
 80046b4:	428b      	cmp	r3, r1
 80046b6:	bf04      	itt	eq
 80046b8:	6819      	ldreq	r1, [r3, #0]
 80046ba:	685b      	ldreq	r3, [r3, #4]
 80046bc:	6063      	str	r3, [r4, #4]
 80046be:	bf04      	itt	eq
 80046c0:	1949      	addeq	r1, r1, r5
 80046c2:	6021      	streq	r1, [r4, #0]
 80046c4:	6054      	str	r4, [r2, #4]
 80046c6:	e7c7      	b.n	8004658 <_free_r+0x28>
 80046c8:	b003      	add	sp, #12
 80046ca:	bd30      	pop	{r4, r5, pc}
 80046cc:	200004a8 	.word	0x200004a8

080046d0 <_malloc_r>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	1ccd      	adds	r5, r1, #3
 80046d4:	f025 0503 	bic.w	r5, r5, #3
 80046d8:	3508      	adds	r5, #8
 80046da:	2d0c      	cmp	r5, #12
 80046dc:	bf38      	it	cc
 80046de:	250c      	movcc	r5, #12
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	4606      	mov	r6, r0
 80046e4:	db01      	blt.n	80046ea <_malloc_r+0x1a>
 80046e6:	42a9      	cmp	r1, r5
 80046e8:	d903      	bls.n	80046f2 <_malloc_r+0x22>
 80046ea:	230c      	movs	r3, #12
 80046ec:	6033      	str	r3, [r6, #0]
 80046ee:	2000      	movs	r0, #0
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f2:	f000 fbdf 	bl	8004eb4 <__malloc_lock>
 80046f6:	4921      	ldr	r1, [pc, #132]	; (800477c <_malloc_r+0xac>)
 80046f8:	680a      	ldr	r2, [r1, #0]
 80046fa:	4614      	mov	r4, r2
 80046fc:	b99c      	cbnz	r4, 8004726 <_malloc_r+0x56>
 80046fe:	4f20      	ldr	r7, [pc, #128]	; (8004780 <_malloc_r+0xb0>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	b923      	cbnz	r3, 800470e <_malloc_r+0x3e>
 8004704:	4621      	mov	r1, r4
 8004706:	4630      	mov	r0, r6
 8004708:	f000 fb2a 	bl	8004d60 <_sbrk_r>
 800470c:	6038      	str	r0, [r7, #0]
 800470e:	4629      	mov	r1, r5
 8004710:	4630      	mov	r0, r6
 8004712:	f000 fb25 	bl	8004d60 <_sbrk_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	d123      	bne.n	8004762 <_malloc_r+0x92>
 800471a:	230c      	movs	r3, #12
 800471c:	6033      	str	r3, [r6, #0]
 800471e:	4630      	mov	r0, r6
 8004720:	f000 fbce 	bl	8004ec0 <__malloc_unlock>
 8004724:	e7e3      	b.n	80046ee <_malloc_r+0x1e>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	1b5b      	subs	r3, r3, r5
 800472a:	d417      	bmi.n	800475c <_malloc_r+0x8c>
 800472c:	2b0b      	cmp	r3, #11
 800472e:	d903      	bls.n	8004738 <_malloc_r+0x68>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	441c      	add	r4, r3
 8004734:	6025      	str	r5, [r4, #0]
 8004736:	e004      	b.n	8004742 <_malloc_r+0x72>
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	42a2      	cmp	r2, r4
 800473c:	bf0c      	ite	eq
 800473e:	600b      	streq	r3, [r1, #0]
 8004740:	6053      	strne	r3, [r2, #4]
 8004742:	4630      	mov	r0, r6
 8004744:	f000 fbbc 	bl	8004ec0 <__malloc_unlock>
 8004748:	f104 000b 	add.w	r0, r4, #11
 800474c:	1d23      	adds	r3, r4, #4
 800474e:	f020 0007 	bic.w	r0, r0, #7
 8004752:	1ac2      	subs	r2, r0, r3
 8004754:	d0cc      	beq.n	80046f0 <_malloc_r+0x20>
 8004756:	1a1b      	subs	r3, r3, r0
 8004758:	50a3      	str	r3, [r4, r2]
 800475a:	e7c9      	b.n	80046f0 <_malloc_r+0x20>
 800475c:	4622      	mov	r2, r4
 800475e:	6864      	ldr	r4, [r4, #4]
 8004760:	e7cc      	b.n	80046fc <_malloc_r+0x2c>
 8004762:	1cc4      	adds	r4, r0, #3
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	42a0      	cmp	r0, r4
 800476a:	d0e3      	beq.n	8004734 <_malloc_r+0x64>
 800476c:	1a21      	subs	r1, r4, r0
 800476e:	4630      	mov	r0, r6
 8004770:	f000 faf6 	bl	8004d60 <_sbrk_r>
 8004774:	3001      	adds	r0, #1
 8004776:	d1dd      	bne.n	8004734 <_malloc_r+0x64>
 8004778:	e7cf      	b.n	800471a <_malloc_r+0x4a>
 800477a:	bf00      	nop
 800477c:	200004a8 	.word	0x200004a8
 8004780:	200004ac 	.word	0x200004ac

08004784 <__sfputc_r>:
 8004784:	6893      	ldr	r3, [r2, #8]
 8004786:	3b01      	subs	r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	b410      	push	{r4}
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	da08      	bge.n	80047a2 <__sfputc_r+0x1e>
 8004790:	6994      	ldr	r4, [r2, #24]
 8004792:	42a3      	cmp	r3, r4
 8004794:	db01      	blt.n	800479a <__sfputc_r+0x16>
 8004796:	290a      	cmp	r1, #10
 8004798:	d103      	bne.n	80047a2 <__sfputc_r+0x1e>
 800479a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479e:	f7ff bc69 	b.w	8004074 <__swbuf_r>
 80047a2:	6813      	ldr	r3, [r2, #0]
 80047a4:	1c58      	adds	r0, r3, #1
 80047a6:	6010      	str	r0, [r2, #0]
 80047a8:	7019      	strb	r1, [r3, #0]
 80047aa:	4608      	mov	r0, r1
 80047ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <__sfputs_r>:
 80047b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	4614      	mov	r4, r2
 80047ba:	18d5      	adds	r5, r2, r3
 80047bc:	42ac      	cmp	r4, r5
 80047be:	d101      	bne.n	80047c4 <__sfputs_r+0x12>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e007      	b.n	80047d4 <__sfputs_r+0x22>
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	463a      	mov	r2, r7
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7ff ffda 	bl	8004784 <__sfputc_r>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d1f3      	bne.n	80047bc <__sfputs_r+0xa>
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d8 <_vfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	460d      	mov	r5, r1
 80047de:	b09d      	sub	sp, #116	; 0x74
 80047e0:	4614      	mov	r4, r2
 80047e2:	4698      	mov	r8, r3
 80047e4:	4606      	mov	r6, r0
 80047e6:	b118      	cbz	r0, 80047f0 <_vfiprintf_r+0x18>
 80047e8:	6983      	ldr	r3, [r0, #24]
 80047ea:	b90b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x18>
 80047ec:	f7ff fe1c 	bl	8004428 <__sinit>
 80047f0:	4b89      	ldr	r3, [pc, #548]	; (8004a18 <_vfiprintf_r+0x240>)
 80047f2:	429d      	cmp	r5, r3
 80047f4:	d11b      	bne.n	800482e <_vfiprintf_r+0x56>
 80047f6:	6875      	ldr	r5, [r6, #4]
 80047f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047fa:	07d9      	lsls	r1, r3, #31
 80047fc:	d405      	bmi.n	800480a <_vfiprintf_r+0x32>
 80047fe:	89ab      	ldrh	r3, [r5, #12]
 8004800:	059a      	lsls	r2, r3, #22
 8004802:	d402      	bmi.n	800480a <_vfiprintf_r+0x32>
 8004804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004806:	f7ff fead 	bl	8004564 <__retarget_lock_acquire_recursive>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	d501      	bpl.n	8004814 <_vfiprintf_r+0x3c>
 8004810:	692b      	ldr	r3, [r5, #16]
 8004812:	b9eb      	cbnz	r3, 8004850 <_vfiprintf_r+0x78>
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff fc7e 	bl	8004118 <__swsetup_r>
 800481c:	b1c0      	cbz	r0, 8004850 <_vfiprintf_r+0x78>
 800481e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004820:	07dc      	lsls	r4, r3, #31
 8004822:	d50e      	bpl.n	8004842 <_vfiprintf_r+0x6a>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	b01d      	add	sp, #116	; 0x74
 800482a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <_vfiprintf_r+0x244>)
 8004830:	429d      	cmp	r5, r3
 8004832:	d101      	bne.n	8004838 <_vfiprintf_r+0x60>
 8004834:	68b5      	ldr	r5, [r6, #8]
 8004836:	e7df      	b.n	80047f8 <_vfiprintf_r+0x20>
 8004838:	4b79      	ldr	r3, [pc, #484]	; (8004a20 <_vfiprintf_r+0x248>)
 800483a:	429d      	cmp	r5, r3
 800483c:	bf08      	it	eq
 800483e:	68f5      	ldreq	r5, [r6, #12]
 8004840:	e7da      	b.n	80047f8 <_vfiprintf_r+0x20>
 8004842:	89ab      	ldrh	r3, [r5, #12]
 8004844:	0598      	lsls	r0, r3, #22
 8004846:	d4ed      	bmi.n	8004824 <_vfiprintf_r+0x4c>
 8004848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800484a:	f7ff fe8c 	bl	8004566 <__retarget_lock_release_recursive>
 800484e:	e7e9      	b.n	8004824 <_vfiprintf_r+0x4c>
 8004850:	2300      	movs	r3, #0
 8004852:	9309      	str	r3, [sp, #36]	; 0x24
 8004854:	2320      	movs	r3, #32
 8004856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800485a:	f8cd 800c 	str.w	r8, [sp, #12]
 800485e:	2330      	movs	r3, #48	; 0x30
 8004860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a24 <_vfiprintf_r+0x24c>
 8004864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004868:	f04f 0901 	mov.w	r9, #1
 800486c:	4623      	mov	r3, r4
 800486e:	469a      	mov	sl, r3
 8004870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004874:	b10a      	cbz	r2, 800487a <_vfiprintf_r+0xa2>
 8004876:	2a25      	cmp	r2, #37	; 0x25
 8004878:	d1f9      	bne.n	800486e <_vfiprintf_r+0x96>
 800487a:	ebba 0b04 	subs.w	fp, sl, r4
 800487e:	d00b      	beq.n	8004898 <_vfiprintf_r+0xc0>
 8004880:	465b      	mov	r3, fp
 8004882:	4622      	mov	r2, r4
 8004884:	4629      	mov	r1, r5
 8004886:	4630      	mov	r0, r6
 8004888:	f7ff ff93 	bl	80047b2 <__sfputs_r>
 800488c:	3001      	adds	r0, #1
 800488e:	f000 80aa 	beq.w	80049e6 <_vfiprintf_r+0x20e>
 8004892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004894:	445a      	add	r2, fp
 8004896:	9209      	str	r2, [sp, #36]	; 0x24
 8004898:	f89a 3000 	ldrb.w	r3, [sl]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a2 	beq.w	80049e6 <_vfiprintf_r+0x20e>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ac:	f10a 0a01 	add.w	sl, sl, #1
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	9307      	str	r3, [sp, #28]
 80048b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b8:	931a      	str	r3, [sp, #104]	; 0x68
 80048ba:	4654      	mov	r4, sl
 80048bc:	2205      	movs	r2, #5
 80048be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c2:	4858      	ldr	r0, [pc, #352]	; (8004a24 <_vfiprintf_r+0x24c>)
 80048c4:	f7fb fcbc 	bl	8000240 <memchr>
 80048c8:	9a04      	ldr	r2, [sp, #16]
 80048ca:	b9d8      	cbnz	r0, 8004904 <_vfiprintf_r+0x12c>
 80048cc:	06d1      	lsls	r1, r2, #27
 80048ce:	bf44      	itt	mi
 80048d0:	2320      	movmi	r3, #32
 80048d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048d6:	0713      	lsls	r3, r2, #28
 80048d8:	bf44      	itt	mi
 80048da:	232b      	movmi	r3, #43	; 0x2b
 80048dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e0:	f89a 3000 	ldrb.w	r3, [sl]
 80048e4:	2b2a      	cmp	r3, #42	; 0x2a
 80048e6:	d015      	beq.n	8004914 <_vfiprintf_r+0x13c>
 80048e8:	9a07      	ldr	r2, [sp, #28]
 80048ea:	4654      	mov	r4, sl
 80048ec:	2000      	movs	r0, #0
 80048ee:	f04f 0c0a 	mov.w	ip, #10
 80048f2:	4621      	mov	r1, r4
 80048f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f8:	3b30      	subs	r3, #48	; 0x30
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d94e      	bls.n	800499c <_vfiprintf_r+0x1c4>
 80048fe:	b1b0      	cbz	r0, 800492e <_vfiprintf_r+0x156>
 8004900:	9207      	str	r2, [sp, #28]
 8004902:	e014      	b.n	800492e <_vfiprintf_r+0x156>
 8004904:	eba0 0308 	sub.w	r3, r0, r8
 8004908:	fa09 f303 	lsl.w	r3, r9, r3
 800490c:	4313      	orrs	r3, r2
 800490e:	9304      	str	r3, [sp, #16]
 8004910:	46a2      	mov	sl, r4
 8004912:	e7d2      	b.n	80048ba <_vfiprintf_r+0xe2>
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	1d19      	adds	r1, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	9103      	str	r1, [sp, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	bfbb      	ittet	lt
 8004920:	425b      	neglt	r3, r3
 8004922:	f042 0202 	orrlt.w	r2, r2, #2
 8004926:	9307      	strge	r3, [sp, #28]
 8004928:	9307      	strlt	r3, [sp, #28]
 800492a:	bfb8      	it	lt
 800492c:	9204      	strlt	r2, [sp, #16]
 800492e:	7823      	ldrb	r3, [r4, #0]
 8004930:	2b2e      	cmp	r3, #46	; 0x2e
 8004932:	d10c      	bne.n	800494e <_vfiprintf_r+0x176>
 8004934:	7863      	ldrb	r3, [r4, #1]
 8004936:	2b2a      	cmp	r3, #42	; 0x2a
 8004938:	d135      	bne.n	80049a6 <_vfiprintf_r+0x1ce>
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	9203      	str	r2, [sp, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	bfb8      	it	lt
 8004946:	f04f 33ff 	movlt.w	r3, #4294967295
 800494a:	3402      	adds	r4, #2
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a34 <_vfiprintf_r+0x25c>
 8004952:	7821      	ldrb	r1, [r4, #0]
 8004954:	2203      	movs	r2, #3
 8004956:	4650      	mov	r0, sl
 8004958:	f7fb fc72 	bl	8000240 <memchr>
 800495c:	b140      	cbz	r0, 8004970 <_vfiprintf_r+0x198>
 800495e:	2340      	movs	r3, #64	; 0x40
 8004960:	eba0 000a 	sub.w	r0, r0, sl
 8004964:	fa03 f000 	lsl.w	r0, r3, r0
 8004968:	9b04      	ldr	r3, [sp, #16]
 800496a:	4303      	orrs	r3, r0
 800496c:	3401      	adds	r4, #1
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004974:	482c      	ldr	r0, [pc, #176]	; (8004a28 <_vfiprintf_r+0x250>)
 8004976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800497a:	2206      	movs	r2, #6
 800497c:	f7fb fc60 	bl	8000240 <memchr>
 8004980:	2800      	cmp	r0, #0
 8004982:	d03f      	beq.n	8004a04 <_vfiprintf_r+0x22c>
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <_vfiprintf_r+0x254>)
 8004986:	bb1b      	cbnz	r3, 80049d0 <_vfiprintf_r+0x1f8>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	3307      	adds	r3, #7
 800498c:	f023 0307 	bic.w	r3, r3, #7
 8004990:	3308      	adds	r3, #8
 8004992:	9303      	str	r3, [sp, #12]
 8004994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004996:	443b      	add	r3, r7
 8004998:	9309      	str	r3, [sp, #36]	; 0x24
 800499a:	e767      	b.n	800486c <_vfiprintf_r+0x94>
 800499c:	fb0c 3202 	mla	r2, ip, r2, r3
 80049a0:	460c      	mov	r4, r1
 80049a2:	2001      	movs	r0, #1
 80049a4:	e7a5      	b.n	80048f2 <_vfiprintf_r+0x11a>
 80049a6:	2300      	movs	r3, #0
 80049a8:	3401      	adds	r4, #1
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f04f 0c0a 	mov.w	ip, #10
 80049b2:	4620      	mov	r0, r4
 80049b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049b8:	3a30      	subs	r2, #48	; 0x30
 80049ba:	2a09      	cmp	r2, #9
 80049bc:	d903      	bls.n	80049c6 <_vfiprintf_r+0x1ee>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0c5      	beq.n	800494e <_vfiprintf_r+0x176>
 80049c2:	9105      	str	r1, [sp, #20]
 80049c4:	e7c3      	b.n	800494e <_vfiprintf_r+0x176>
 80049c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ca:	4604      	mov	r4, r0
 80049cc:	2301      	movs	r3, #1
 80049ce:	e7f0      	b.n	80049b2 <_vfiprintf_r+0x1da>
 80049d0:	ab03      	add	r3, sp, #12
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	462a      	mov	r2, r5
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <_vfiprintf_r+0x258>)
 80049d8:	a904      	add	r1, sp, #16
 80049da:	4630      	mov	r0, r6
 80049dc:	f3af 8000 	nop.w
 80049e0:	4607      	mov	r7, r0
 80049e2:	1c78      	adds	r0, r7, #1
 80049e4:	d1d6      	bne.n	8004994 <_vfiprintf_r+0x1bc>
 80049e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049e8:	07d9      	lsls	r1, r3, #31
 80049ea:	d405      	bmi.n	80049f8 <_vfiprintf_r+0x220>
 80049ec:	89ab      	ldrh	r3, [r5, #12]
 80049ee:	059a      	lsls	r2, r3, #22
 80049f0:	d402      	bmi.n	80049f8 <_vfiprintf_r+0x220>
 80049f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049f4:	f7ff fdb7 	bl	8004566 <__retarget_lock_release_recursive>
 80049f8:	89ab      	ldrh	r3, [r5, #12]
 80049fa:	065b      	lsls	r3, r3, #25
 80049fc:	f53f af12 	bmi.w	8004824 <_vfiprintf_r+0x4c>
 8004a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a02:	e711      	b.n	8004828 <_vfiprintf_r+0x50>
 8004a04:	ab03      	add	r3, sp, #12
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	462a      	mov	r2, r5
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <_vfiprintf_r+0x258>)
 8004a0c:	a904      	add	r1, sp, #16
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f000 f880 	bl	8004b14 <_printf_i>
 8004a14:	e7e4      	b.n	80049e0 <_vfiprintf_r+0x208>
 8004a16:	bf00      	nop
 8004a18:	080051d8 	.word	0x080051d8
 8004a1c:	080051f8 	.word	0x080051f8
 8004a20:	080051b8 	.word	0x080051b8
 8004a24:	08005218 	.word	0x08005218
 8004a28:	08005222 	.word	0x08005222
 8004a2c:	00000000 	.word	0x00000000
 8004a30:	080047b3 	.word	0x080047b3
 8004a34:	0800521e 	.word	0x0800521e

08004a38 <_printf_common>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	4699      	mov	r9, r3
 8004a40:	688a      	ldr	r2, [r1, #8]
 8004a42:	690b      	ldr	r3, [r1, #16]
 8004a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	bfb8      	it	lt
 8004a4c:	4613      	movlt	r3, r2
 8004a4e:	6033      	str	r3, [r6, #0]
 8004a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a54:	4607      	mov	r7, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	b10a      	cbz	r2, 8004a5e <_printf_common+0x26>
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	0699      	lsls	r1, r3, #26
 8004a62:	bf42      	ittt	mi
 8004a64:	6833      	ldrmi	r3, [r6, #0]
 8004a66:	3302      	addmi	r3, #2
 8004a68:	6033      	strmi	r3, [r6, #0]
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	f015 0506 	ands.w	r5, r5, #6
 8004a70:	d106      	bne.n	8004a80 <_printf_common+0x48>
 8004a72:	f104 0a19 	add.w	sl, r4, #25
 8004a76:	68e3      	ldr	r3, [r4, #12]
 8004a78:	6832      	ldr	r2, [r6, #0]
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	dc26      	bgt.n	8004ace <_printf_common+0x96>
 8004a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a84:	1e13      	subs	r3, r2, #0
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	bf18      	it	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	0692      	lsls	r2, r2, #26
 8004a8e:	d42b      	bmi.n	8004ae8 <_printf_common+0xb0>
 8004a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d01e      	beq.n	8004adc <_printf_common+0xa4>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	68e5      	ldr	r5, [r4, #12]
 8004aa2:	6832      	ldr	r2, [r6, #0]
 8004aa4:	f003 0306 	and.w	r3, r3, #6
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	bf08      	it	eq
 8004aac:	1aad      	subeq	r5, r5, r2
 8004aae:	68a3      	ldr	r3, [r4, #8]
 8004ab0:	6922      	ldr	r2, [r4, #16]
 8004ab2:	bf0c      	ite	eq
 8004ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab8:	2500      	movne	r5, #0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	bfc4      	itt	gt
 8004abe:	1a9b      	subgt	r3, r3, r2
 8004ac0:	18ed      	addgt	r5, r5, r3
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	341a      	adds	r4, #26
 8004ac6:	42b5      	cmp	r5, r6
 8004ac8:	d11a      	bne.n	8004b00 <_printf_common+0xc8>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e008      	b.n	8004ae0 <_printf_common+0xa8>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	47c0      	blx	r8
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d103      	bne.n	8004ae4 <_printf_common+0xac>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	e7c6      	b.n	8004a76 <_printf_common+0x3e>
 8004ae8:	18e1      	adds	r1, r4, r3
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	2030      	movs	r0, #48	; 0x30
 8004aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af2:	4422      	add	r2, r4
 8004af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004afc:	3302      	adds	r3, #2
 8004afe:	e7c7      	b.n	8004a90 <_printf_common+0x58>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4622      	mov	r2, r4
 8004b04:	4649      	mov	r1, r9
 8004b06:	4638      	mov	r0, r7
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d0e6      	beq.n	8004adc <_printf_common+0xa4>
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7d9      	b.n	8004ac6 <_printf_common+0x8e>
	...

08004b14 <_printf_i>:
 8004b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	460c      	mov	r4, r1
 8004b1a:	4691      	mov	r9, r2
 8004b1c:	7e27      	ldrb	r7, [r4, #24]
 8004b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b20:	2f78      	cmp	r7, #120	; 0x78
 8004b22:	4680      	mov	r8, r0
 8004b24:	469a      	mov	sl, r3
 8004b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b2a:	d807      	bhi.n	8004b3c <_printf_i+0x28>
 8004b2c:	2f62      	cmp	r7, #98	; 0x62
 8004b2e:	d80a      	bhi.n	8004b46 <_printf_i+0x32>
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	f000 80d8 	beq.w	8004ce6 <_printf_i+0x1d2>
 8004b36:	2f58      	cmp	r7, #88	; 0x58
 8004b38:	f000 80a3 	beq.w	8004c82 <_printf_i+0x16e>
 8004b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b44:	e03a      	b.n	8004bbc <_printf_i+0xa8>
 8004b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b4a:	2b15      	cmp	r3, #21
 8004b4c:	d8f6      	bhi.n	8004b3c <_printf_i+0x28>
 8004b4e:	a001      	add	r0, pc, #4	; (adr r0, 8004b54 <_printf_i+0x40>)
 8004b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004b3d 	.word	0x08004b3d
 8004b60:	08004b3d 	.word	0x08004b3d
 8004b64:	08004b3d 	.word	0x08004b3d
 8004b68:	08004b3d 	.word	0x08004b3d
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004b3d 	.word	0x08004b3d
 8004b74:	08004b3d 	.word	0x08004b3d
 8004b78:	08004b3d 	.word	0x08004b3d
 8004b7c:	08004b3d 	.word	0x08004b3d
 8004b80:	08004ccd 	.word	0x08004ccd
 8004b84:	08004bf1 	.word	0x08004bf1
 8004b88:	08004caf 	.word	0x08004caf
 8004b8c:	08004b3d 	.word	0x08004b3d
 8004b90:	08004b3d 	.word	0x08004b3d
 8004b94:	08004cef 	.word	0x08004cef
 8004b98:	08004b3d 	.word	0x08004b3d
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004b3d 	.word	0x08004b3d
 8004ba4:	08004b3d 	.word	0x08004b3d
 8004ba8:	08004cb7 	.word	0x08004cb7
 8004bac:	680b      	ldr	r3, [r1, #0]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	600a      	str	r2, [r1, #0]
 8004bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0a3      	b.n	8004d08 <_printf_i+0x1f4>
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	6808      	ldr	r0, [r1, #0]
 8004bc4:	062e      	lsls	r6, r5, #24
 8004bc6:	f100 0304 	add.w	r3, r0, #4
 8004bca:	d50a      	bpl.n	8004be2 <_printf_i+0xce>
 8004bcc:	6805      	ldr	r5, [r0, #0]
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	da03      	bge.n	8004bdc <_printf_i+0xc8>
 8004bd4:	232d      	movs	r3, #45	; 0x2d
 8004bd6:	426d      	negs	r5, r5
 8004bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bdc:	485e      	ldr	r0, [pc, #376]	; (8004d58 <_printf_i+0x244>)
 8004bde:	230a      	movs	r3, #10
 8004be0:	e019      	b.n	8004c16 <_printf_i+0x102>
 8004be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004be6:	6805      	ldr	r5, [r0, #0]
 8004be8:	600b      	str	r3, [r1, #0]
 8004bea:	bf18      	it	ne
 8004bec:	b22d      	sxthne	r5, r5
 8004bee:	e7ef      	b.n	8004bd0 <_printf_i+0xbc>
 8004bf0:	680b      	ldr	r3, [r1, #0]
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	1d18      	adds	r0, r3, #4
 8004bf6:	6008      	str	r0, [r1, #0]
 8004bf8:	0628      	lsls	r0, r5, #24
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0xec>
 8004bfc:	681d      	ldr	r5, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <_printf_i+0xf2>
 8004c00:	0669      	lsls	r1, r5, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0xe8>
 8004c04:	881d      	ldrh	r5, [r3, #0]
 8004c06:	4854      	ldr	r0, [pc, #336]	; (8004d58 <_printf_i+0x244>)
 8004c08:	2f6f      	cmp	r7, #111	; 0x6f
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2308      	moveq	r3, #8
 8004c0e:	230a      	movne	r3, #10
 8004c10:	2100      	movs	r1, #0
 8004c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c16:	6866      	ldr	r6, [r4, #4]
 8004c18:	60a6      	str	r6, [r4, #8]
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	bfa2      	ittt	ge
 8004c1e:	6821      	ldrge	r1, [r4, #0]
 8004c20:	f021 0104 	bicge.w	r1, r1, #4
 8004c24:	6021      	strge	r1, [r4, #0]
 8004c26:	b90d      	cbnz	r5, 8004c2c <_printf_i+0x118>
 8004c28:	2e00      	cmp	r6, #0
 8004c2a:	d04d      	beq.n	8004cc8 <_printf_i+0x1b4>
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c32:	fb03 5711 	mls	r7, r3, r1, r5
 8004c36:	5dc7      	ldrb	r7, [r0, r7]
 8004c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c3c:	462f      	mov	r7, r5
 8004c3e:	42bb      	cmp	r3, r7
 8004c40:	460d      	mov	r5, r1
 8004c42:	d9f4      	bls.n	8004c2e <_printf_i+0x11a>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10b      	bne.n	8004c60 <_printf_i+0x14c>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	07df      	lsls	r7, r3, #31
 8004c4c:	d508      	bpl.n	8004c60 <_printf_i+0x14c>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6861      	ldr	r1, [r4, #4]
 8004c52:	4299      	cmp	r1, r3
 8004c54:	bfde      	ittt	le
 8004c56:	2330      	movle	r3, #48	; 0x30
 8004c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c60:	1b92      	subs	r2, r2, r6
 8004c62:	6122      	str	r2, [r4, #16]
 8004c64:	f8cd a000 	str.w	sl, [sp]
 8004c68:	464b      	mov	r3, r9
 8004c6a:	aa03      	add	r2, sp, #12
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4640      	mov	r0, r8
 8004c70:	f7ff fee2 	bl	8004a38 <_printf_common>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d14c      	bne.n	8004d12 <_printf_i+0x1fe>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b004      	add	sp, #16
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	4835      	ldr	r0, [pc, #212]	; (8004d58 <_printf_i+0x244>)
 8004c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	680e      	ldr	r6, [r1, #0]
 8004c8c:	061f      	lsls	r7, r3, #24
 8004c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c92:	600e      	str	r6, [r1, #0]
 8004c94:	d514      	bpl.n	8004cc0 <_printf_i+0x1ac>
 8004c96:	07d9      	lsls	r1, r3, #31
 8004c98:	bf44      	itt	mi
 8004c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c9e:	6023      	strmi	r3, [r4, #0]
 8004ca0:	b91d      	cbnz	r5, 8004caa <_printf_i+0x196>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f023 0320 	bic.w	r3, r3, #32
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	2310      	movs	r3, #16
 8004cac:	e7b0      	b.n	8004c10 <_printf_i+0xfc>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f043 0320 	orr.w	r3, r3, #32
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	2378      	movs	r3, #120	; 0x78
 8004cb8:	4828      	ldr	r0, [pc, #160]	; (8004d5c <_printf_i+0x248>)
 8004cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cbe:	e7e3      	b.n	8004c88 <_printf_i+0x174>
 8004cc0:	065e      	lsls	r6, r3, #25
 8004cc2:	bf48      	it	mi
 8004cc4:	b2ad      	uxthmi	r5, r5
 8004cc6:	e7e6      	b.n	8004c96 <_printf_i+0x182>
 8004cc8:	4616      	mov	r6, r2
 8004cca:	e7bb      	b.n	8004c44 <_printf_i+0x130>
 8004ccc:	680b      	ldr	r3, [r1, #0]
 8004cce:	6826      	ldr	r6, [r4, #0]
 8004cd0:	6960      	ldr	r0, [r4, #20]
 8004cd2:	1d1d      	adds	r5, r3, #4
 8004cd4:	600d      	str	r5, [r1, #0]
 8004cd6:	0635      	lsls	r5, r6, #24
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0x1cc>
 8004cdc:	6018      	str	r0, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <_printf_i+0x1d2>
 8004ce0:	0671      	lsls	r1, r6, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0x1c8>
 8004ce4:	8018      	strh	r0, [r3, #0]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6123      	str	r3, [r4, #16]
 8004cea:	4616      	mov	r6, r2
 8004cec:	e7ba      	b.n	8004c64 <_printf_i+0x150>
 8004cee:	680b      	ldr	r3, [r1, #0]
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	600a      	str	r2, [r1, #0]
 8004cf4:	681e      	ldr	r6, [r3, #0]
 8004cf6:	6862      	ldr	r2, [r4, #4]
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7fb faa0 	bl	8000240 <memchr>
 8004d00:	b108      	cbz	r0, 8004d06 <_printf_i+0x1f2>
 8004d02:	1b80      	subs	r0, r0, r6
 8004d04:	6060      	str	r0, [r4, #4]
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	6123      	str	r3, [r4, #16]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d10:	e7a8      	b.n	8004c64 <_printf_i+0x150>
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	4632      	mov	r2, r6
 8004d16:	4649      	mov	r1, r9
 8004d18:	4640      	mov	r0, r8
 8004d1a:	47d0      	blx	sl
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d0ab      	beq.n	8004c78 <_printf_i+0x164>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	079b      	lsls	r3, r3, #30
 8004d24:	d413      	bmi.n	8004d4e <_printf_i+0x23a>
 8004d26:	68e0      	ldr	r0, [r4, #12]
 8004d28:	9b03      	ldr	r3, [sp, #12]
 8004d2a:	4298      	cmp	r0, r3
 8004d2c:	bfb8      	it	lt
 8004d2e:	4618      	movlt	r0, r3
 8004d30:	e7a4      	b.n	8004c7c <_printf_i+0x168>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4632      	mov	r2, r6
 8004d36:	4649      	mov	r1, r9
 8004d38:	4640      	mov	r0, r8
 8004d3a:	47d0      	blx	sl
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d09b      	beq.n	8004c78 <_printf_i+0x164>
 8004d40:	3501      	adds	r5, #1
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	9903      	ldr	r1, [sp, #12]
 8004d46:	1a5b      	subs	r3, r3, r1
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dcf2      	bgt.n	8004d32 <_printf_i+0x21e>
 8004d4c:	e7eb      	b.n	8004d26 <_printf_i+0x212>
 8004d4e:	2500      	movs	r5, #0
 8004d50:	f104 0619 	add.w	r6, r4, #25
 8004d54:	e7f5      	b.n	8004d42 <_printf_i+0x22e>
 8004d56:	bf00      	nop
 8004d58:	08005229 	.word	0x08005229
 8004d5c:	0800523a 	.word	0x0800523a

08004d60 <_sbrk_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d06      	ldr	r5, [pc, #24]	; (8004d7c <_sbrk_r+0x1c>)
 8004d64:	2300      	movs	r3, #0
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	f7fc fa34 	bl	80011d8 <_sbrk>
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	d102      	bne.n	8004d7a <_sbrk_r+0x1a>
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	b103      	cbz	r3, 8004d7a <_sbrk_r+0x1a>
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	bd38      	pop	{r3, r4, r5, pc}
 8004d7c:	20000608 	.word	0x20000608

08004d80 <__sread>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	460c      	mov	r4, r1
 8004d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d88:	f000 f8a0 	bl	8004ecc <_read_r>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	bfab      	itete	ge
 8004d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d92:	89a3      	ldrhlt	r3, [r4, #12]
 8004d94:	181b      	addge	r3, r3, r0
 8004d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d9a:	bfac      	ite	ge
 8004d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d9e:	81a3      	strhlt	r3, [r4, #12]
 8004da0:	bd10      	pop	{r4, pc}

08004da2 <__swrite>:
 8004da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da6:	461f      	mov	r7, r3
 8004da8:	898b      	ldrh	r3, [r1, #12]
 8004daa:	05db      	lsls	r3, r3, #23
 8004dac:	4605      	mov	r5, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	4616      	mov	r6, r2
 8004db2:	d505      	bpl.n	8004dc0 <__swrite+0x1e>
 8004db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db8:	2302      	movs	r3, #2
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f000 f868 	bl	8004e90 <_lseek_r>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	4632      	mov	r2, r6
 8004dce:	463b      	mov	r3, r7
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd6:	f000 b817 	b.w	8004e08 <_write_r>

08004dda <__sseek>:
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	460c      	mov	r4, r1
 8004dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de2:	f000 f855 	bl	8004e90 <_lseek_r>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	bf15      	itete	ne
 8004dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004df6:	81a3      	strheq	r3, [r4, #12]
 8004df8:	bf18      	it	ne
 8004dfa:	81a3      	strhne	r3, [r4, #12]
 8004dfc:	bd10      	pop	{r4, pc}

08004dfe <__sclose>:
 8004dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e02:	f000 b813 	b.w	8004e2c <_close_r>
	...

08004e08 <_write_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d07      	ldr	r5, [pc, #28]	; (8004e28 <_write_r+0x20>)
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	4608      	mov	r0, r1
 8004e10:	4611      	mov	r1, r2
 8004e12:	2200      	movs	r2, #0
 8004e14:	602a      	str	r2, [r5, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7fc f98d 	bl	8001136 <_write>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d102      	bne.n	8004e26 <_write_r+0x1e>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	b103      	cbz	r3, 8004e26 <_write_r+0x1e>
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
 8004e28:	20000608 	.word	0x20000608

08004e2c <_close_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d06      	ldr	r5, [pc, #24]	; (8004e48 <_close_r+0x1c>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fc f999 	bl	800116e <_close>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_close_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_close_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	20000608 	.word	0x20000608

08004e4c <_fstat_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d07      	ldr	r5, [pc, #28]	; (8004e6c <_fstat_r+0x20>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	602b      	str	r3, [r5, #0]
 8004e5a:	f7fc f994 	bl	8001186 <_fstat>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d102      	bne.n	8004e68 <_fstat_r+0x1c>
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	b103      	cbz	r3, 8004e68 <_fstat_r+0x1c>
 8004e66:	6023      	str	r3, [r4, #0]
 8004e68:	bd38      	pop	{r3, r4, r5, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000608 	.word	0x20000608

08004e70 <_isatty_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d06      	ldr	r5, [pc, #24]	; (8004e8c <_isatty_r+0x1c>)
 8004e74:	2300      	movs	r3, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	602b      	str	r3, [r5, #0]
 8004e7c:	f7fc f993 	bl	80011a6 <_isatty>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_isatty_r+0x1a>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_isatty_r+0x1a>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20000608 	.word	0x20000608

08004e90 <_lseek_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d07      	ldr	r5, [pc, #28]	; (8004eb0 <_lseek_r+0x20>)
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	602a      	str	r2, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fc f98c 	bl	80011bc <_lseek>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_lseek_r+0x1e>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_lseek_r+0x1e>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000608 	.word	0x20000608

08004eb4 <__malloc_lock>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	; (8004ebc <__malloc_lock+0x8>)
 8004eb6:	f7ff bb55 	b.w	8004564 <__retarget_lock_acquire_recursive>
 8004eba:	bf00      	nop
 8004ebc:	20000600 	.word	0x20000600

08004ec0 <__malloc_unlock>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__malloc_unlock+0x8>)
 8004ec2:	f7ff bb50 	b.w	8004566 <__retarget_lock_release_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	20000600 	.word	0x20000600

08004ecc <_read_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4d07      	ldr	r5, [pc, #28]	; (8004eec <_read_r+0x20>)
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	4608      	mov	r0, r1
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	602a      	str	r2, [r5, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f7fc f90e 	bl	80010fc <_read>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_read_r+0x1e>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_read_r+0x1e>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20000608 	.word	0x20000608

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
